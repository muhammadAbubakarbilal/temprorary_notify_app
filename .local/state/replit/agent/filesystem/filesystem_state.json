{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Project Management Application\n\n## Overview\n\nThis is a modern project management web application built with React and Express.js that provides a comprehensive suite of tools for managing projects, notes, tasks, and time tracking. The application features an AI-powered task extraction system that can automatically identify actionable items from notes, along with a real-time time tracking system and a Kanban-style task board.\n\nThe application serves as a complete productivity solution where users can create projects, write detailed notes with rich text editing, manage tasks through a visual Kanban board, and track time spent on various activities. The AI integration helps streamline workflow by automatically suggesting tasks based on note content.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript using Vite as the build tool\n- **UI Components**: Radix UI primitives with shadcn/ui component library for consistent, accessible design\n- **Styling**: Tailwind CSS with custom design tokens and CSS variables for theming\n- **State Management**: TanStack Query (React Query) for server state management and caching\n- **Routing**: Wouter for lightweight client-side routing\n- **Rich Text Editing**: TiptapJS with extensions for links, highlights, task lists, and formatting\n- **Drag and Drop**: @hello-pangea/dnd for Kanban board functionality\n- **Form Handling**: React Hook Form with Zod validation for type-safe form management\n\n### Backend Architecture\n- **Runtime**: Node.js with TypeScript using tsx for development\n- **Framework**: Express.js for REST API endpoints\n- **Database ORM**: Drizzle ORM with PostgreSQL dialect for type-safe database operations\n- **Database Provider**: Neon Database (serverless PostgreSQL)\n- **Schema Validation**: Zod schemas shared between frontend and backend for consistent validation\n- **Build System**: ESBuild for production bundling with platform-specific optimizations\n\n### Data Storage Solutions\n- **Primary Database**: PostgreSQL via Neon Database serverless platform\n- **Schema Design**: Five main entities with proper relationships:\n  - Projects (with color coding and metadata)\n  - Notes (with rich text content and task associations)\n  - Tasks (with status, priority, and time tracking)\n  - Time entries (for detailed time tracking)\n  - Active timers (for real-time timer functionality)\n- **Migrations**: Drizzle Kit for database schema migrations and version control\n\n### Authentication and Authorization\n- Currently operates without explicit authentication system\n- Designed for single-user or trusted environment usage\n- API endpoints are unprotected, suitable for development or internal use\n\n### AI Integration Architecture\n- **Provider**: OpenAI GPT-4 API integration for intelligent task extraction\n- **Task Analysis**: Automated parsing of note content to identify actionable items\n- **Priority Assessment**: AI-driven priority assignment based on content context and deadlines\n- **Due Date Extraction**: Natural language processing for deadline identification\n- **Suggestion System**: Contextual task recommendations based on note analysis\n\n## External Dependencies\n\n### Core Framework Dependencies\n- **React Ecosystem**: React 18, React DOM, TypeScript for type safety\n- **Build Tools**: Vite with React plugin, ESBuild for production builds\n- **Development**: tsx for TypeScript execution, @replit/vite-plugin-runtime-error-modal for error handling\n\n### UI and Styling Dependencies\n- **Component Library**: Comprehensive Radix UI primitives (@radix-ui/react-*)\n- **Styling**: Tailwind CSS with PostCSS and Autoprefixer\n- **Utility Libraries**: class-variance-authority for component variants, clsx and tailwind-merge for class management\n\n### Backend and Database Dependencies\n- **Server Framework**: Express.js with TypeScript definitions\n- **Database**: Drizzle ORM with Neon Database serverless driver (@neondatabase/serverless)\n- **Schema Management**: drizzle-kit for migrations, drizzle-zod for schema validation integration\n\n### Third-Party Service Integrations\n- **AI Services**: OpenAI API for GPT-4 powered task extraction and analysis\n- **Database Services**: Neon Database for managed PostgreSQL hosting\n- **Development Tools**: Replit-specific plugins for development environment integration\n\n### Specialized Feature Dependencies\n- **Rich Text Editing**: TipTap editor with multiple extensions (StarterKit, Link, Highlight, TaskList, TaskItem)\n- **Drag and Drop**: @hello-pangea/dnd for Kanban board interactions\n- **State Management**: TanStack React Query for server state and caching\n- **Form Management**: React Hook Form with Hookform Resolvers for Zod integration\n- **Routing**: Wouter for lightweight client-side navigation","size_bytes":4834},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n        // Custom theme colors\n        \"ai-primary\": \"var(--ai-primary)\",\n        \"ai-secondary\": \"var(--ai-secondary)\",\n        \"ai-accent\": \"var(--ai-accent)\",\n        \"ai-background\": \"var(--ai-background)\",\n        \"ai-text\": \"var(--ai-text)\",\n        \"ai-card\": \"var(--ai-card)\",\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":3040},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { extractTasksFromNote } from \"./services/ai-service\";\nimport { featureFlagService } from \"./services/feature-flags-service\";\nimport { \n  insertProjectSchema, \n  insertNoteSchema, \n  insertTaskSchema,\n  insertTimeEntrySchema,\n  insertActiveTimerSchema \n} from \"@shared/schema\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Projects\n  app.get(\"/api/projects\", async (req, res) => {\n    try {\n      const projects = await storage.getProjects();\n      res.json(projects);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch projects\" });\n    }\n  });\n\n  app.post(\"/api/projects\", async (req, res) => {\n    try {\n      const validation = insertProjectSchema.safeParse(req.body);\n      if (!validation.success) {\n        return res.status(400).json({ message: \"Invalid project data\", errors: validation.error.errors });\n      }\n      \n      const project = await storage.createProject(validation.data);\n      res.status(201).json(project);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to create project\" });\n    }\n  });\n\n  app.get(\"/api/projects/:id\", async (req, res) => {\n    try {\n      const project = await storage.getProject(req.params.id);\n      if (!project) {\n        return res.status(404).json({ message: \"Project not found\" });\n      }\n      res.json(project);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch project\" });\n    }\n  });\n\n  app.patch(\"/api/projects/:id\", async (req, res) => {\n    try {\n      const validation = insertProjectSchema.partial().safeParse(req.body);\n      if (!validation.success) {\n        return res.status(400).json({ message: \"Invalid project data\", errors: validation.error.errors });\n      }\n      \n      const project = await storage.updateProject(req.params.id, validation.data);\n      if (!project) {\n        return res.status(404).json({ message: \"Project not found\" });\n      }\n      res.json(project);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to update project\" });\n    }\n  });\n\n  app.delete(\"/api/projects/:id\", async (req, res) => {\n    try {\n      const success = await storage.deleteProject(req.params.id);\n      if (!success) {\n        return res.status(404).json({ message: \"Project not found\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete project\" });\n    }\n  });\n\n  // Notes\n  app.get(\"/api/projects/:projectId/notes\", async (req, res) => {\n    try {\n      const notes = await storage.getNotesByProject(req.params.projectId);\n      res.json(notes);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch notes\" });\n    }\n  });\n\n  app.post(\"/api/projects/:projectId/notes\", async (req, res) => {\n    try {\n      const noteData = { ...req.body, projectId: req.params.projectId };\n      const validation = insertNoteSchema.safeParse(noteData);\n      if (!validation.success) {\n        return res.status(400).json({ message: \"Invalid note data\", errors: validation.error.errors });\n      }\n      \n      const note = await storage.createNote(validation.data);\n      res.status(201).json(note);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to create note\" });\n    }\n  });\n\n  app.get(\"/api/notes/:id\", async (req, res) => {\n    try {\n      const note = await storage.getNote(req.params.id);\n      if (!note) {\n        return res.status(404).json({ message: \"Note not found\" });\n      }\n      res.json(note);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch note\" });\n    }\n  });\n\n  app.patch(\"/api/notes/:id\", async (req, res) => {\n    try {\n      const validation = insertNoteSchema.partial().safeParse(req.body);\n      if (!validation.success) {\n        return res.status(400).json({ message: \"Invalid note data\", errors: validation.error.errors });\n      }\n      \n      const note = await storage.updateNote(req.params.id, validation.data);\n      if (!note) {\n        return res.status(404).json({ message: \"Note not found\" });\n      }\n\n      // Auto-extract tasks from new content\n      if (validation.data.content) {\n        const oldNote = await storage.getNote(req.params.id);\n        if (oldNote) {\n          const oldLength = oldNote.lastProcessedLength || 0;\n          const newContent = validation.data.content;\n          \n          if (newContent.length > oldLength) {\n            // Extract from new content only\n            const newContentPart = newContent.substring(oldLength);\n            \n            try {\n              const extractResponse = await fetch(`http://localhost:5000/api/notes/${req.params.id}/extract-tasks`, {\n                method: 'POST',\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify({ contentPart: newContentPart })\n              });\n              \n              if (extractResponse.ok) {\n                // Update the processed length\n                await storage.updateNote(req.params.id, { \n                  lastProcessedLength: newContent.length \n                });\n              }\n            } catch (error) {\n              console.log('Task extraction failed:', error);\n              // Continue even if extraction fails\n            }\n          }\n        }\n      }\n      \n      res.json(note);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to update note\" });\n    }\n  });\n\n  app.delete(\"/api/notes/:id\", async (req, res) => {\n    try {\n      const success = await storage.deleteNote(req.params.id);\n      if (!success) {\n        return res.status(404).json({ message: \"Note not found\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete note\" });\n    }\n  });\n\n  // AI Task Extraction\n  app.post(\"/api/notes/:id/extract-tasks\", async (req, res) => {\n    try {\n      const note = await storage.getNote(req.params.id);\n      if (!note) {\n        return res.status(404).json({ message: \"Note not found\" });\n      }\n\n      // Use contentPart if provided (for incremental extraction), otherwise use full content\n      const contentToProcess = req.body.contentPart || note.content;\n      \n      const extractedTasks = await extractTasksFromNote(contentToProcess);\n      const createdTasks = [];\n\n      for (const taskData of extractedTasks) {\n        const task = await storage.createTask({\n          projectId: note.projectId,\n          noteId: note.id,\n          title: taskData.title,\n          description: taskData.description,\n          priority: taskData.priority,\n          status: 'todo',\n          dueDate: taskData.dueDate ? new Date(taskData.dueDate) : undefined,\n        });\n        createdTasks.push(task);\n      }\n\n      res.json({ tasks: createdTasks, count: createdTasks.length });\n    } catch (error) {\n      console.error(\"Task extraction error:\", error);\n      res.status(500).json({ message: \"Failed to extract tasks from note\" });\n    }\n  });\n\n  app.post(\"/api/notes/:id/suggestions\", async (req, res) => {\n    try {\n      const note = await storage.getNote(req.params.id);\n      if (!note) {\n        return res.status(404).json({ message: \"Note not found\" });\n      }\n\n      const suggestions = await extractTasksFromNote(note.content, note.title);\n      res.json({ suggestions });\n    } catch (error) {\n      console.error(\"Task suggestions error:\", error);\n      res.status(500).json({ message: \"Failed to generate task suggestions\" });\n    }\n  });\n\n  // Tasks\n  app.get(\"/api/projects/:projectId/tasks\", async (req, res) => {\n    try {\n      const tasks = await storage.getTasksByProject(req.params.projectId);\n      res.json(tasks);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch tasks\" });\n    }\n  });\n\n  app.post(\"/api/projects/:projectId/tasks\", async (req, res) => {\n    try {\n      const taskData = { ...req.body, projectId: req.params.projectId };\n      const validation = insertTaskSchema.safeParse(taskData);\n      if (!validation.success) {\n        return res.status(400).json({ message: \"Invalid task data\", errors: validation.error.errors });\n      }\n      \n      const task = await storage.createTask(validation.data);\n      res.status(201).json(task);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to create task\" });\n    }\n  });\n\n  app.patch(\"/api/tasks/:id\", async (req, res) => {\n    try {\n      const validation = insertTaskSchema.partial().safeParse(req.body);\n      if (!validation.success) {\n        return res.status(400).json({ message: \"Invalid task data\", errors: validation.error.errors });\n      }\n      \n      const task = await storage.updateTask(req.params.id, validation.data);\n      if (!task) {\n        return res.status(404).json({ message: \"Task not found\" });\n      }\n      res.json(task);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to update task\" });\n    }\n  });\n\n  app.delete(\"/api/tasks/:id\", async (req, res) => {\n    try {\n      const success = await storage.deleteTask(req.params.id);\n      if (!success) {\n        return res.status(404).json({ message: \"Task not found\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete task\" });\n    }\n  });\n\n  // Time Tracking\n  app.get(\"/api/timer/active\", async (req, res) => {\n    try {\n      const activeTimer = await storage.getActiveTimer();\n      res.json(activeTimer || null);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch active timer\" });\n    }\n  });\n\n  app.get(\"/api/timers/active\", async (req, res) => {\n    try {\n      const activeTimers = await storage.getActiveTimers();\n      res.json(activeTimers);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch active timers\" });\n    }\n  });\n\n  app.post(\"/api/timer/start\", async (req, res) => {\n    try {\n      // Transform string date to Date object for validation\n      const requestData = {\n        ...req.body,\n        startTime: req.body.startTime ? new Date(req.body.startTime) : new Date()\n      };\n      \n      const validation = insertActiveTimerSchema.safeParse(requestData);\n      if (!validation.success) {\n        return res.status(400).json({ message: \"Invalid timer data\", errors: validation.error.errors });\n      }\n      \n      const timer = await storage.startTimer(validation.data);\n      res.status(201).json(timer);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to start timer\" });\n    }\n  });\n\n  app.post(\"/api/timer/stop\", async (req, res) => {\n    try {\n      const { taskId } = req.body;\n      const timeEntry = await storage.stopTimer(taskId);\n      if (!timeEntry) {\n        return res.status(404).json({ message: \"No active timer found\" });\n      }\n      res.json(timeEntry);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to stop timer\" });\n    }\n  });\n\n  app.get(\"/api/tasks/:taskId/time-entries\", async (req, res) => {\n    try {\n      const entries = await storage.getTimeEntriesByTask(req.params.taskId);\n      res.json(entries);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch time entries\" });\n    }\n  });\n\n  // Feature Flags\n  app.get(\"/api/feature-flags\", async (req, res) => {\n    try {\n      const { userId = 'default-user', workspaceId } = req.query;\n      const flags = await featureFlagService.getFeatureFlags(\n        userId as string,\n        workspaceId as string | undefined\n      );\n      res.json(flags);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch feature flags\" });\n    }\n  });\n\n  app.post(\"/api/feature-flags\", async (req, res) => {\n    try {\n      const { scopeType, scopeId, key, value } = req.body;\n      \n      if (!['user', 'workspace'].includes(scopeType)) {\n        return res.status(400).json({ message: \"Invalid scope type\" });\n      }\n      \n      await featureFlagService.setFeatureFlag(scopeType, scopeId, key, value);\n      res.status(201).json({ success: true });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to set feature flag\" });\n    }\n  });\n\n  // Enhanced Tasks API for Kanban\n  app.get(\"/api/tasks\", async (req, res) => {\n    try {\n      const { projectId, status, assigneeId } = req.query;\n      const tasks = await storage.getTasks({\n        projectId: projectId as string,\n        status: status as string,\n        assigneeId: assigneeId as string,\n      });\n      res.json(tasks);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch tasks\" });\n    }\n  });\n\n  app.post(\"/api/tasks\", async (req, res) => {\n    try {\n      const validation = insertTaskSchema.safeParse(req.body);\n      if (!validation.success) {\n        return res.status(400).json({ message: \"Invalid task data\", errors: validation.error.errors });\n      }\n      \n      const task = await storage.createTask(validation.data);\n      res.status(201).json(task);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to create task\" });\n    }\n  });\n\n  // Spaces and Workspaces (basic support)\n  app.get(\"/api/spaces\", async (req, res) => {\n    try {\n      // For now, return a simple personal/professional space structure\n      const spaces = [\n        { id: 'personal', type: 'personal', name: 'Personal' },\n        { id: 'professional', type: 'professional', name: 'Professional' }\n      ];\n      res.json(spaces);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch spaces\" });\n    }\n  });\n\n  app.get(\"/api/workspaces\", async (req, res) => {\n    try {\n      const { spaceId } = req.query;\n      // For now, return empty workspaces - this would be expanded in full implementation\n      const workspaces = [];\n      res.json(workspaces);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch workspaces\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":14050},"server/storage.ts":{"content":"import {\n  type Project,\n  type InsertProject,\n  type Note,\n  type InsertNote,\n  type Task,\n  type InsertTask,\n  type TimeEntry,\n  type InsertTimeEntry,\n  type ActiveTimer,\n  type InsertActiveTimer,\n  type ProjectWithStats,\n  type TaskWithTimeTracking,\n  type NoteWithTaskCount,\n} from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\nexport interface IStorage {\n  // Projects\n  getProjects(): Promise<ProjectWithStats[]>;\n  getProject(id: string): Promise<Project | undefined>;\n  createProject(project: InsertProject): Promise<Project>;\n  updateProject(id: string, project: Partial<InsertProject>): Promise<Project | undefined>;\n  deleteProject(id: string): Promise<boolean>;\n\n  // Notes\n  getNotesByProject(projectId: string): Promise<NoteWithTaskCount[]>;\n  getNote(id: string): Promise<Note | undefined>;\n  createNote(note: InsertNote): Promise<Note>;\n  updateNote(id: string, note: Partial<InsertNote>): Promise<Note | undefined>;\n  deleteNote(id: string): Promise<boolean>;\n\n  // Tasks\n  getTasksByProject(projectId: string): Promise<TaskWithTimeTracking[]>;\n  getTask(id: string): Promise<Task | undefined>;\n  createTask(task: InsertTask): Promise<Task>;\n  updateTask(id: string, task: Partial<InsertTask>): Promise<Task | undefined>;\n  deleteTask(id: string): Promise<boolean>;\n\n  // Time Entries\n  getTimeEntriesByTask(taskId: string): Promise<TimeEntry[]>;\n  createTimeEntry(entry: InsertTimeEntry): Promise<TimeEntry>;\n  updateTimeEntry(id: string, entry: Partial<InsertTimeEntry>): Promise<TimeEntry | undefined>;\n\n  // Active Timers\n  getActiveTimer(): Promise<ActiveTimer | undefined>;\n  startTimer(timer: InsertActiveTimer): Promise<ActiveTimer>;\n  stopTimer(): Promise<TimeEntry | undefined>;\n}\n\nexport class MemStorage implements IStorage {\n  private projects: Map<string, Project> = new Map();\n  private notes: Map<string, Note> = new Map();\n  private tasks: Map<string, Task> = new Map();\n  private timeEntries: Map<string, TimeEntry> = new Map();\n  private activeTimers: Map<string, ActiveTimer> = new Map();\n\n  constructor() {\n    this.seedData();\n  }\n\n  private seedData() {\n    // Create default project\n    const defaultProject: Project = {\n      id: \"project-1\",\n      name: \"Marketing Campaign\",\n      description: \"Q4 marketing campaign planning and execution\",\n      color: \"#6366F1\",\n      spaceId: null,\n      workspaceId: null,\n      status: \"active\",\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    this.projects.set(defaultProject.id, defaultProject);\n  }\n\n  // Projects\n  async getProjects(): Promise<ProjectWithStats[]> {\n    const projects = Array.from(this.projects.values());\n    return projects.map(project => {\n      const projectTasks = Array.from(this.tasks.values()).filter(t => t.projectId === project.id);\n      const projectNotes = Array.from(this.notes.values()).filter(n => n.projectId === project.id);\n      return {\n        ...project,\n        taskCount: projectTasks.length,\n        noteCount: projectNotes.length,\n      };\n    });\n  }\n\n  async getProject(id: string): Promise<Project | undefined> {\n    return this.projects.get(id);\n  }\n\n  async createProject(insertProject: InsertProject): Promise<Project> {\n    const id = randomUUID();\n    const project: Project = {\n      ...insertProject,\n      id,\n      color: insertProject.color || \"#6366F1\",\n      description: insertProject.description || null,\n      spaceId: insertProject.spaceId || null,\n      workspaceId: insertProject.workspaceId || null,\n      status: insertProject.status || \"active\",\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    this.projects.set(id, project);\n    return project;\n  }\n\n  async updateProject(id: string, update: Partial<InsertProject>): Promise<Project | undefined> {\n    const project = this.projects.get(id);\n    if (!project) return undefined;\n    \n    const updatedProject: Project = { \n      ...project, \n      ...update, \n      updatedAt: new Date() \n    };\n    this.projects.set(id, updatedProject);\n    return updatedProject;\n  }\n\n  async deleteProject(id: string): Promise<boolean> {\n    return this.projects.delete(id);\n  }\n\n  // Notes\n  async getNotesByProject(projectId: string): Promise<NoteWithTaskCount[]> {\n    const notes = Array.from(this.notes.values()).filter(n => n.projectId === projectId);\n    return notes.map(note => {\n      const tasksFromNote = Array.from(this.tasks.values()).filter(t => t.noteId === note.id);\n      return {\n        ...note,\n        tasksExtracted: tasksFromNote.length,\n      };\n    });\n  }\n\n  async getNote(id: string): Promise<Note | undefined> {\n    return this.notes.get(id);\n  }\n\n  async createNote(insertNote: InsertNote): Promise<Note> {\n    const id = randomUUID();\n    const note: Note = {\n      ...insertNote,\n      id,\n      content: insertNote.content || \"\",\n      spaceId: insertNote.spaceId || null,\n      workspaceId: insertNote.workspaceId || null,\n      projectId: insertNote.projectId || null,\n      authorId: insertNote.authorId || null,\n      tags: (insertNote.tags as string[]) || [],\n      backlinks: (insertNote.backlinks as string[]) || [],\n      visibilityScope: insertNote.visibilityScope || \"private\",\n      lastProcessedLength: insertNote.lastProcessedLength || 0,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    this.notes.set(id, note);\n    return note;\n  }\n\n  async updateNote(id: string, update: Partial<InsertNote>): Promise<Note | undefined> {\n    const note = this.notes.get(id);\n    if (!note) return undefined;\n    \n    const updatedNote = { \n      ...note, \n      ...update, \n      tags: (update.tags as string[]) || note.tags,\n      backlinks: (update.backlinks as string[]) || note.backlinks,\n      updatedAt: new Date() \n    };\n    this.notes.set(id, updatedNote);\n    return updatedNote;\n  }\n\n  async deleteNote(id: string): Promise<boolean> {\n    return this.notes.delete(id);\n  }\n\n  // Tasks\n  async getTasksByProject(projectId: string): Promise<TaskWithTimeTracking[]> {\n    const tasks = Array.from(this.tasks.values()).filter(t => t.projectId === projectId);\n    return tasks.map(task => {\n      const taskTimeEntries = Array.from(this.timeEntries.values()).filter(te => te.taskId === task.id);\n      const totalTime = taskTimeEntries.reduce((sum, entry) => sum + entry.duration, 0);\n      const activeTimer = Array.from(this.activeTimers.values()).find(at => at.taskId === task.id);\n      \n      return {\n        ...task,\n        totalTime,\n        isActive: !!activeTimer,\n      };\n    });\n  }\n\n  async getTask(id: string): Promise<Task | undefined> {\n    return this.tasks.get(id);\n  }\n\n  // Enhanced task queries with filtering\n  async getTasks(filters?: { \n    projectId?: string; \n    status?: string; \n    assigneeId?: string; \n  }): Promise<Task[]> {\n    let tasks = Array.from(this.tasks.values());\n    \n    if (filters?.projectId) {\n      tasks = tasks.filter(task => task.projectId === filters.projectId);\n    }\n    if (filters?.status) {\n      tasks = tasks.filter(task => task.status === filters.status);\n    }\n    if (filters?.assigneeId) {\n      tasks = tasks.filter(task => task.assigneeId === filters.assigneeId);\n    }\n    \n    return tasks;\n  }\n\n  async createTask(insertTask: InsertTask): Promise<Task> {\n    const id = randomUUID();\n    const task: Task = {\n      ...insertTask,\n      id,\n      description: insertTask.description || null,\n      priority: insertTask.priority || \"medium\",\n      status: insertTask.status || \"todo\",\n      noteId: insertTask.noteId || null,\n      assigneeId: insertTask.assigneeId || null,\n      dueDate: insertTask.dueDate || null,\n      tags: (insertTask.tags as string[]) || [],\n      seriesId: insertTask.seriesId || null,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    this.tasks.set(id, task);\n    return task;\n  }\n\n  async updateTask(id: string, update: Partial<InsertTask>): Promise<Task | undefined> {\n    const task = this.tasks.get(id);\n    if (!task) return undefined;\n    \n    const updatedTask = { \n      ...task, \n      ...update, \n      tags: (update.tags as string[]) || task.tags,\n      updatedAt: new Date() \n    };\n    this.tasks.set(id, updatedTask);\n    return updatedTask;\n  }\n\n  async deleteTask(id: string): Promise<boolean> {\n    return this.tasks.delete(id);\n  }\n\n  // Time Entries\n  async getTimeEntriesByTask(taskId: string): Promise<TimeEntry[]> {\n    return Array.from(this.timeEntries.values()).filter(te => te.taskId === taskId);\n  }\n\n  async createTimeEntry(insertEntry: InsertTimeEntry): Promise<TimeEntry> {\n    const id = randomUUID();\n    const entry: TimeEntry = {\n      ...insertEntry,\n      id,\n      duration: insertEntry.duration || 0,\n      description: insertEntry.description || null,\n      endTime: insertEntry.endTime || null,\n      createdAt: new Date(),\n    };\n    this.timeEntries.set(id, entry);\n    return entry;\n  }\n\n  async updateTimeEntry(id: string, update: Partial<InsertTimeEntry>): Promise<TimeEntry | undefined> {\n    const entry = this.timeEntries.get(id);\n    if (!entry) return undefined;\n    \n    const updatedEntry = { ...entry, ...update };\n    this.timeEntries.set(id, updatedEntry);\n    return updatedEntry;\n  }\n\n  // Active Timers - Support multiple concurrent timers\n  async getActiveTimer(): Promise<ActiveTimer | undefined> {\n    const timers = Array.from(this.activeTimers.values());\n    return timers[0]; // For backward compatibility, return first\n  }\n\n  async getActiveTimers(): Promise<ActiveTimer[]> {\n    return Array.from(this.activeTimers.values());\n  }\n\n  async getActiveTimerByTask(taskId: string): Promise<ActiveTimer | undefined> {\n    return Array.from(this.activeTimers.values()).find(timer => timer.taskId === taskId);\n  }\n\n  async startTimer(insertTimer: InsertActiveTimer): Promise<ActiveTimer> {\n    // Check if this task already has an active timer\n    const existingTimer = await this.getActiveTimerByTask(insertTimer.taskId);\n    if (existingTimer) {\n      return existingTimer; // Return existing timer if task is already being tracked\n    }\n    \n    const id = randomUUID();\n    const timer: ActiveTimer = {\n      ...insertTimer,\n      id,\n      createdAt: new Date(),\n    };\n    this.activeTimers.set(id, timer);\n    return timer;\n  }\n\n  async stopTimer(taskId?: string): Promise<TimeEntry | undefined> {\n    let activeTimer: ActiveTimer | undefined;\n    \n    if (taskId) {\n      // Stop timer for specific task\n      activeTimer = await this.getActiveTimerByTask(taskId);\n    } else {\n      // Stop any active timer (backward compatibility)\n      activeTimer = await this.getActiveTimer();\n    }\n    \n    if (!activeTimer) return undefined;\n\n    const endTime = new Date();\n    const duration = Math.floor((endTime.getTime() - activeTimer.startTime.getTime()) / 1000);\n\n    const timeEntry = await this.createTimeEntry({\n      taskId: activeTimer.taskId,\n      startTime: activeTimer.startTime,\n      endTime,\n      duration,\n    });\n\n    this.activeTimers.delete(activeTimer.id);\n    return timeEntry;\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":11029},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, timestamp, integer, json, boolean } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Base tables first (no foreign keys)\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: text(\"email\").notNull().unique(),\n  name: text(\"name\").notNull(),\n  personalKeyRef: text(\"personal_key_ref\"), // For encryption\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\nexport const spaces = pgTable(\"spaces\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  type: text(\"type\").notNull(), // 'personal' | 'professional'\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const workspaces = pgTable(\"workspaces\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  spaceId: varchar(\"space_id\").references(() => spaces.id).notNull(),\n  name: text(\"name\").notNull(),\n  policyManagerNoteAccess: boolean(\"policy_manager_note_access\").notNull().default(false),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\nexport const memberships = pgTable(\"memberships\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  workspaceId: varchar(\"workspace_id\").references(() => workspaces.id).notNull(),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  role: text(\"role\").notNull(), // 'owner' | 'manager' | 'member' | 'viewer'\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const projects = pgTable(\"projects\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  description: text(\"description\"),\n  color: text(\"color\").notNull().default('#6366F1'),\n  spaceId: varchar(\"space_id\").references(() => spaces.id),\n  workspaceId: varchar(\"workspace_id\").references(() => workspaces.id),\n  status: text(\"status\").notNull().default('active'), // active, archived, deleted\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\nexport const notes = pgTable(\"notes\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  spaceId: varchar(\"space_id\").references(() => spaces.id),\n  workspaceId: varchar(\"workspace_id\").references(() => workspaces.id),\n  projectId: varchar(\"project_id\").references(() => projects.id),\n  authorId: varchar(\"author_id\").references(() => users.id),\n  title: text(\"title\").notNull(),\n  content: text(\"content\").notNull().default(''),\n  tags: json(\"tags\").$type<string[]>().default([]),\n  backlinks: json(\"backlinks\").$type<string[]>().default([]),\n  visibilityScope: text(\"visibility_scope\").notNull().default('private'), // private, project, workspace\n  lastProcessedLength: integer(\"last_processed_length\").notNull().default(0), // For incremental task extraction\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\nexport const tasks = pgTable(\"tasks\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  projectId: varchar(\"project_id\").references(() => projects.id).notNull(),\n  noteId: varchar(\"note_id\").references(() => notes.id),\n  title: text(\"title\").notNull(),\n  description: text(\"description\"),\n  status: text(\"status\").notNull().default('todo'), // todo, in_progress, paused, done\n  priority: text(\"priority\").notNull().default('medium'), // low, medium, high, urgent\n  assigneeId: varchar(\"assignee_id\").references(() => users.id),\n  dueDate: timestamp(\"due_date\"),\n  tags: json(\"tags\").$type<string[]>().default([]),\n  seriesId: varchar(\"series_id\"), // For recurring tasks\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\nexport const timeEntries = pgTable(\"time_entries\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  taskId: varchar(\"task_id\").references(() => tasks.id).notNull(),\n  startTime: timestamp(\"start_time\").notNull(),\n  endTime: timestamp(\"end_time\"),\n  duration: integer(\"duration\").notNull().default(0), // in seconds\n  description: text(\"description\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const activeTimers = pgTable(\"active_timers\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  taskId: varchar(\"task_id\").references(() => tasks.id).notNull(),\n  startTime: timestamp(\"start_time\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const boardColumns = pgTable(\"board_columns\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  projectId: varchar(\"project_id\").references(() => projects.id).notNull(),\n  name: text(\"name\").notNull(),\n  order: integer(\"order\").notNull(),\n  color: text(\"color\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const taskBoardPositions = pgTable(\"task_board_positions\", {\n  taskId: varchar(\"task_id\").references(() => tasks.id).notNull(),\n  columnId: varchar(\"column_id\").references(() => boardColumns.id).notNull(),\n  order: integer(\"order\").notNull(),\n});\n\nexport const subtasks = pgTable(\"subtasks\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  taskId: varchar(\"task_id\").references(() => tasks.id).notNull(),\n  title: text(\"title\").notNull(),\n  done: boolean(\"done\").notNull().default(false),\n  order: integer(\"order\").notNull().default(0),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const recurrenceRules = pgTable(\"recurrence_rules\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  taskId: varchar(\"task_id\").references(() => tasks.id).notNull(),\n  rruleText: text(\"rrule_text\").notNull(),\n  timezone: text(\"timezone\").notNull().default('UTC'),\n  nextOccurrenceAt: timestamp(\"next_occurrence_at\"),\n  seriesId: varchar(\"series_id\"), // To link related recurring tasks\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const featureFlags = pgTable(\"feature_flags\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  scopeType: text(\"scope_type\").notNull(), // 'user' | 'workspace'\n  scopeId: varchar(\"scope_id\").notNull(),\n  key: text(\"key\").notNull(),\n  value: boolean(\"value\").notNull().default(false),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\nexport const auditLogs = pgTable(\"audit_logs\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  workspaceId: varchar(\"workspace_id\").references(() => workspaces.id),\n  actorId: varchar(\"actor_id\").references(() => users.id).notNull(),\n  action: text(\"action\").notNull(),\n  targetType: text(\"target_type\").notNull(),\n  targetId: varchar(\"target_id\").notNull(),\n  diffJson: json(\"diff_json\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertSpaceSchema = createInsertSchema(spaces).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertWorkspaceSchema = createInsertSchema(workspaces).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertMembershipSchema = createInsertSchema(memberships).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertProjectSchema = createInsertSchema(projects).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertNoteSchema = createInsertSchema(notes).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertTaskSchema = createInsertSchema(tasks).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertSubtaskSchema = createInsertSchema(subtasks).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertBoardColumnSchema = createInsertSchema(boardColumns).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertTaskBoardPositionSchema = createInsertSchema(taskBoardPositions);\n\nexport const insertRecurrenceRuleSchema = createInsertSchema(recurrenceRules).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertFeatureFlagSchema = createInsertSchema(featureFlags).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertTimeEntrySchema = createInsertSchema(timeEntries).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertActiveTimerSchema = createInsertSchema(activeTimers).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertAuditLogSchema = createInsertSchema(auditLogs).omit({\n  id: true,\n  createdAt: true,\n});\n\n// Types\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\n\nexport type Space = typeof spaces.$inferSelect;\nexport type InsertSpace = z.infer<typeof insertSpaceSchema>;\n\nexport type Workspace = typeof workspaces.$inferSelect;\nexport type InsertWorkspace = z.infer<typeof insertWorkspaceSchema>;\n\nexport type Membership = typeof memberships.$inferSelect;\nexport type InsertMembership = z.infer<typeof insertMembershipSchema>;\n\nexport type Project = typeof projects.$inferSelect;\nexport type InsertProject = z.infer<typeof insertProjectSchema>;\n\nexport type Note = typeof notes.$inferSelect;\nexport type InsertNote = z.infer<typeof insertNoteSchema>;\n\nexport type Task = typeof tasks.$inferSelect;\nexport type InsertTask = z.infer<typeof insertTaskSchema>;\n\nexport type Subtask = typeof subtasks.$inferSelect;\nexport type InsertSubtask = z.infer<typeof insertSubtaskSchema>;\n\nexport type BoardColumn = typeof boardColumns.$inferSelect;\nexport type InsertBoardColumn = z.infer<typeof insertBoardColumnSchema>;\n\nexport type TaskBoardPosition = typeof taskBoardPositions.$inferSelect;\nexport type InsertTaskBoardPosition = z.infer<typeof insertTaskBoardPositionSchema>;\n\nexport type RecurrenceRule = typeof recurrenceRules.$inferSelect;\nexport type InsertRecurrenceRule = z.infer<typeof insertRecurrenceRuleSchema>;\n\nexport type FeatureFlag = typeof featureFlags.$inferSelect;\nexport type InsertFeatureFlag = z.infer<typeof insertFeatureFlagSchema>;\n\nexport type TimeEntry = typeof timeEntries.$inferSelect;\nexport type InsertTimeEntry = z.infer<typeof insertTimeEntrySchema>;\n\nexport type ActiveTimer = typeof activeTimers.$inferSelect;\nexport type InsertActiveTimer = z.infer<typeof insertActiveTimerSchema>;\n\nexport type AuditLog = typeof auditLogs.$inferSelect;\nexport type InsertAuditLog = z.infer<typeof insertAuditLogSchema>;\n\n// Extended types with relations\nexport type ProjectWithStats = Project & {\n  taskCount: number;\n  noteCount: number;\n};\n\nexport type TaskWithTimeTracking = Task & {\n  totalTime: number;\n  isActive: boolean;\n};\n\nexport type NoteWithTaskCount = Note & {\n  tasksExtracted: number;\n};\n\nexport type TaskWithSubtasks = Task & {\n  subtasks: Subtask[];\n  boardPosition?: TaskBoardPosition & { column: BoardColumn };\n};\n\nexport type UserWithWorkspaces = User & {\n  workspaces: (Membership & { workspace: Workspace })[];\n};\n\n// API Response types\nexport type AITaskSuggestion = {\n  title: string;\n  description?: string;\n  priority: 'low' | 'medium' | 'high' | 'urgent';\n  dueDate?: Date;\n  assigneeId?: string;\n  tags?: string[];\n};\n\nexport type SpaceContext = {\n  currentSpace: 'personal' | 'professional';\n  workspaceId?: string;\n  userId?: string;\n};","size_bytes":11604},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport Dashboard from \"@/pages/dashboard\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Dashboard} />\n      <Route path=\"/project/:id\" component={Dashboard} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":772},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&family=JetBrains+Mono:wght@400;500&display=swap');\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0 0% 98%);\n  --foreground: hsl(210 24% 9%);\n  --card: hsl(0 0% 100%);\n  --card-foreground: hsl(210 24% 9%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(210 24% 9%);\n  --primary: hsl(231 48% 62%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(256 45% 62%);\n  --secondary-foreground: hsl(0 0% 100%);\n  --muted: hsl(220 13% 91%);\n  --muted-foreground: hsl(220 9% 46%);\n  --accent: hsl(159 54% 44%);\n  --accent-foreground: hsl(0 0% 100%);\n  --destructive: hsl(0 73% 60%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(220 13% 91%);\n  --input: hsl(220 13% 91%);\n  --ring: hsl(231 48% 62%);\n  --chart-1: hsl(231 48% 62%);\n  --chart-2: hsl(159 54% 44%);\n  --chart-3: hsl(42 87% 55%);\n  --chart-4: hsl(147 50% 47%);\n  --chart-5: hsl(341 75% 51%);\n  --sidebar: hsl(0 0% 100%);\n  --sidebar-foreground: hsl(210 24% 9%);\n  --sidebar-primary: hsl(231 48% 62%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(220 13% 91%);\n  --sidebar-accent-foreground: hsl(210 24% 9%);\n  --sidebar-border: hsl(220 13% 91%);\n  --sidebar-ring: hsl(231 48% 62%);\n  --font-sans: 'Inter', system-ui, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: 'JetBrains Mono', Monaco, monospace;\n  --radius: 0.5rem;\n  \n  /* Custom theme colors */\n  --ai-primary: hsl(231 48% 62%);\n  --ai-secondary: hsl(256 45% 62%);\n  --ai-accent: hsl(159 54% 44%);\n  --ai-background: hsl(0 0% 98%);\n  --ai-text: hsl(210 24% 9%);\n  --ai-card: hsl(0 0% 100%);\n}\n\n.dark {\n  --background: hsl(210 24% 9%);\n  --foreground: hsl(0 0% 98%);\n  --card: hsl(210 20% 12%);\n  --card-foreground: hsl(0 0% 95%);\n  --popover: hsl(210 20% 12%);\n  --popover-foreground: hsl(0 0% 95%);\n  --primary: hsl(231 48% 62%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(256 45% 62%);\n  --secondary-foreground: hsl(0 0% 100%);\n  --muted: hsl(210 20% 18%);\n  --muted-foreground: hsl(215 16% 65%);\n  --accent: hsl(159 54% 44%);\n  --accent-foreground: hsl(0 0% 100%);\n  --destructive: hsl(0 73% 60%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(210 20% 18%);\n  --input: hsl(210 20% 18%);\n  --ring: hsl(231 48% 62%);\n  --sidebar: hsl(210 20% 12%);\n  --sidebar-foreground: hsl(0 0% 95%);\n  --sidebar-primary: hsl(231 48% 62%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(210 20% 18%);\n  --sidebar-accent-foreground: hsl(0 0% 95%);\n  --sidebar-border: hsl(210 20% 18%);\n  --sidebar-ring: hsl(231 48% 62%);\n  \n  /* Custom theme colors for dark mode */\n  --ai-primary: hsl(231 48% 62%);\n  --ai-secondary: hsl(256 45% 62%);\n  --ai-accent: hsl(159 54% 44%);\n  --ai-background: hsl(210 24% 9%);\n  --ai-text: hsl(0 0% 98%);\n  --ai-card: hsl(210 20% 12%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n\n  /* Rich text editor styles */\n  .ProseMirror {\n    outline: none;\n    @apply text-foreground;\n  }\n  \n  .ProseMirror h1,\n  .ProseMirror h2,\n  .ProseMirror h3,\n  .ProseMirror h4,\n  .ProseMirror h5,\n  .ProseMirror h6 {\n    @apply font-semibold text-foreground;\n  }\n\n  .ProseMirror h1 {\n    @apply text-3xl mb-4 mt-6;\n  }\n\n  .ProseMirror h2 {\n    @apply text-2xl mb-3 mt-5;\n  }\n\n  .ProseMirror h3 {\n    @apply text-xl mb-2 mt-4;\n  }\n\n  .ProseMirror p {\n    @apply mb-3 leading-relaxed;\n  }\n\n  .ProseMirror ul,\n  .ProseMirror ol {\n    @apply mb-3 pl-6;\n  }\n\n  .ProseMirror li {\n    @apply mb-1;\n  }\n\n  .ProseMirror ul li {\n    @apply list-disc;\n  }\n\n  .ProseMirror ol li {\n    @apply list-decimal;\n  }\n\n  .ProseMirror blockquote {\n    @apply border-l-4 border-primary pl-4 my-4 italic text-muted-foreground;\n  }\n\n  .ProseMirror code {\n    @apply bg-muted px-1 py-0.5 rounded text-sm font-mono;\n  }\n\n  .ProseMirror pre {\n    @apply bg-muted p-4 rounded mb-3 overflow-x-auto;\n  }\n\n  .ProseMirror pre code {\n    @apply bg-transparent p-0;\n  }\n\n  .ProseMirror mark {\n    @apply bg-yellow-200 dark:bg-yellow-800 px-1 rounded;\n  }\n\n  .ProseMirror strong {\n    @apply font-semibold;\n  }\n\n  .ProseMirror em {\n    @apply italic;\n  }\n\n  .ProseMirror a {\n    @apply text-primary underline hover:text-primary hover:opacity-80;\n  }\n\n  /* Drag and drop styles */\n  .task-card-dragging {\n    @apply opacity-50 rotate-2 shadow-lg;\n  }\n\n  .drop-zone-active {\n    @apply bg-primary bg-opacity-5 border-primary border-opacity-30 border-2 border-dashed;\n  }\n\n  /* Custom scrollbar */\n  .custom-scrollbar::-webkit-scrollbar {\n    width: 6px;\n  }\n\n  .custom-scrollbar::-webkit-scrollbar-track {\n    background: transparent;\n  }\n\n  .custom-scrollbar::-webkit-scrollbar-thumb {\n    background: hsl(var(--muted-foreground));\n    opacity: 0.3;\n    border-radius: 3px;\n  }\n\n  .custom-scrollbar::-webkit-scrollbar-thumb:hover {\n    background: hsl(var(--muted-foreground));\n    opacity: 0.5;\n  }\n}\n\n/* Animation classes */\n@keyframes pulse-ai {\n  0%, 100% {\n    opacity: 1;\n  }\n  50% {\n    opacity: 0.5;\n  }\n}\n\n.animate-pulse-ai {\n  animation: pulse-ai 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;\n}\n\n/* Priority badge colors */\n.priority-low {\n  @apply bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200;\n}\n\n.priority-medium {\n  @apply bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200;\n}\n\n.priority-high {\n  @apply bg-orange-100 text-orange-800 dark:bg-orange-900 dark:text-orange-200;\n}\n\n.priority-urgent {\n  @apply bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200;\n}\n\n/* Status badge colors */\n.status-todo {\n  @apply bg-gray-100 text-gray-800 dark:bg-gray-800 dark:text-gray-200;\n}\n\n.status-in-progress {\n  @apply bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200;\n}\n\n.status-done {\n  @apply bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200;\n}\n","size_bytes":5926},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"server/services/gemini.ts":{"content":"import { GoogleGenAI } from \"@google/genai\";\n\n// Make Gemini optional - only initialize if API key is provided\nconst gemini = process.env.GEMINI_API_KEY \n  ? new GoogleGenAI({ apiKey: process.env.GEMINI_API_KEY })\n  : null;\n\nexport interface ExtractedTask {\n  title: string;\n  description: string;\n  priority: 'low' | 'medium' | 'high' | 'urgent';\n  dueDate?: string;\n}\n\n// Simple fallback task extraction without AI\nfunction extractTasksWithoutAI(content: string): ExtractedTask[] {\n  const tasks: ExtractedTask[] = [];\n  \n  // Simple patterns to identify potential tasks\n  const taskPatterns = [\n    /(?:^|\\n)\\s*[-*]\\s+(.+?)(?:\\n|$)/g, // Bullet points\n    /(?:^|\\n)\\s*\\d+\\.\\s+(.+?)(?:\\n|$)/g, // Numbered lists\n    /(?:need to|should|must|have to|will|going to|plan to|todo:?)\\s+(.+?)(?:\\.|$)/gi, // Action words\n    /(?:^|\\n)\\s*(?:TODO:?|TASK:?|ACTION:?)\\s*(.+?)(?:\\n|$)/gi, // Explicit task markers\n  ];\n\n  taskPatterns.forEach(pattern => {\n    let match;\n    while ((match = pattern.exec(content)) !== null) {\n      const taskText = match[1].trim();\n      if (taskText.length > 3 && taskText.length < 200 && \n          !taskText.endsWith(':') && \n          !taskText.toLowerCase().includes('action items') &&\n          !taskText.toLowerCase().includes('additional tasks') &&\n          !taskText.toLowerCase().includes('meeting notes') &&\n          !/^(here are|these are|following)/i.test(taskText)) {\n        // Simple priority detection based on keywords\n        let priority: 'low' | 'medium' | 'high' | 'urgent' = 'medium';\n        if (taskText.toLowerCase().includes('urgent') || taskText.toLowerCase().includes('asap')) {\n          priority = 'urgent';\n        } else if (taskText.toLowerCase().includes('important') || taskText.toLowerCase().includes('critical')) {\n          priority = 'high';\n        } else if (taskText.toLowerCase().includes('later') || taskText.toLowerCase().includes('eventually')) {\n          priority = 'low';\n        }\n\n        // Simple due date extraction\n        const dateMatch = taskText.match(/(?:by|due|before|until)\\s+(\\w+\\s+\\d{1,2}(?:st|nd|rd|th)?,?\\s+\\d{4}|\\d{1,2}\\/\\d{1,2}\\/\\d{4}|\\d{4}-\\d{2}-\\d{2})/i);\n        let dueDate: string | undefined;\n        if (dateMatch) {\n          // For now, just set a future date - could be enhanced with proper date parsing\n          const futureDate = new Date();\n          futureDate.setDate(futureDate.getDate() + 7);\n          dueDate = futureDate.toISOString().split('T')[0];\n        }\n\n        tasks.push({\n          title: taskText.replace(/^(TODO:?|TASK:?|ACTION:?)\\s*/i, '').trim(),\n          description: `Extracted from note content`,\n          priority,\n          dueDate\n        });\n      }\n    }\n  });\n\n  return tasks;\n}\n\nexport async function extractTasksFromNote(content: string): Promise<ExtractedTask[]> {\n  if (!gemini) {\n    console.log('Using fallback task extraction (no Gemini API key)');\n    return extractTasksWithoutAI(content);\n  }\n\n  try {\n    const systemPrompt = `You are an expert at analyzing text and extracting actionable tasks. Look for:\n- Action verbs (schedule, create, review, meet, call, etc.)\n- Deadlines or time references  \n- Specific deliverables or outcomes\n- Meeting requests or appointments\n\nFor each task found, determine:\n- A clear, specific title\n- A brief description\n- Priority level (low, medium, high, urgent) based on context and deadlines\n- Due date if mentioned (format as YYYY-MM-DD)\n\nOnly extract genuine, actionable items that require specific action or follow-up.\nReturn JSON in this format: { \"tasks\": [{ \"title\": \"Task title\", \"description\": \"Task description\", \"priority\": \"medium\", \"dueDate\": \"2024-11-01\" }] }`;\n\n    const prompt = `Analyze this note content and extract actionable tasks:\\n\\n${content}`;\n\n    const response = await gemini.models.generateContent({\n      model: \"gemini-2.5-pro\",\n      config: {\n        systemInstruction: systemPrompt,\n        responseMimeType: \"application/json\",\n        responseSchema: {\n          type: \"object\",\n          properties: {\n            tasks: {\n              type: \"array\",\n              items: {\n                type: \"object\",\n                properties: {\n                  title: { type: \"string\" },\n                  description: { type: \"string\" },\n                  priority: { type: \"string\", enum: [\"low\", \"medium\", \"high\", \"urgent\"] },\n                  dueDate: { type: \"string\" }\n                },\n                required: [\"title\", \"description\", \"priority\"]\n              }\n            }\n          },\n          required: [\"tasks\"]\n        },\n        temperature: 0.3,\n      },\n      contents: prompt,\n    });\n\n    const rawJson = response.text;\n    if (rawJson) {\n      const result = JSON.parse(rawJson);\n      return result.tasks || [];\n    } else {\n      throw new Error(\"Empty response from Gemini model\");\n    }\n  } catch (error) {\n    console.error('Error extracting tasks from note with Gemini:', error);\n    // Fall back to pattern matching if AI fails\n    console.log('Falling back to pattern-based task extraction');\n    return extractTasksWithoutAI(content);\n  }\n}\n\nexport async function generateTaskSuggestions(noteTitle: string, noteContent: string): Promise<string[]> {\n  if (!gemini) {\n    console.warn('Gemini API key not provided, skipping task suggestions');\n    return [];\n  }\n\n  try {\n    const systemPrompt = `You are a helpful project management assistant that suggests logical next steps based on note content. Focus on actionable items that would help move the project forward.\n\nReturn JSON in this format: { \"suggestions\": [\"suggestion 1\", \"suggestion 2\", \"suggestion 3\"] }`;\n\n    const prompt = `Based on this note title \"${noteTitle}\" and content, suggest 3-5 relevant next steps or related tasks:\\n\\n${noteContent}`;\n\n    const response = await gemini.models.generateContent({\n      model: \"gemini-2.5-pro\",\n      config: {\n        systemInstruction: systemPrompt,\n        responseMimeType: \"application/json\",\n        responseSchema: {\n          type: \"object\",\n          properties: {\n            suggestions: {\n              type: \"array\",\n              items: { type: \"string\" }\n            }\n          },\n          required: [\"suggestions\"]\n        },\n        temperature: 0.7,\n      },\n      contents: prompt,\n    });\n\n    const rawJson = response.text;\n    if (rawJson) {\n      const result = JSON.parse(rawJson);\n      return result.suggestions || [];\n    } else {\n      throw new Error(\"Empty response from Gemini model\");\n    }\n  } catch (error) {\n    console.error('Error generating task suggestions with Gemini:', error);\n    return [];\n  }\n}\n","size_bytes":6600},"client/src/components/kanban-board.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { DragDropContext, Droppable, Draggable, DropResult } from \"@hello-pangea/dnd\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { insertTaskSchema } from \"@shared/schema\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Plus, Play, Pause, MoreHorizontal, Link, Calendar } from \"lucide-react\";\nimport { formatTime } from \"@/lib/time-utils\";\nimport type { TaskWithTimeTracking, InsertTask, ActiveTimer } from \"@shared/schema\";\nimport { cn } from \"@/lib/utils\";\n\ninterface KanbanBoardProps {\n  projectId: string;\n}\n\nconst taskStatuses = [\n  { id: 'todo', title: 'To Do', color: 'bg-gray-400' },\n  { id: 'in_progress', title: 'In Progress', color: 'bg-ai-primary' },\n  { id: 'done', title: 'Done', color: 'bg-accent' },\n] as const;\n\nconst priorityColors = {\n  low: 'priority-low',\n  medium: 'priority-medium', \n  high: 'priority-high',\n  urgent: 'priority-urgent'\n};\n\nexport default function KanbanBoard({ projectId }: KanbanBoardProps) {\n  const [newTaskOpen, setNewTaskOpen] = useState(false);\n  const { toast } = useToast();\n\n  const { data: tasks = [] } = useQuery<TaskWithTimeTracking[]>({\n    queryKey: ['/api/projects', projectId, 'tasks'],\n    enabled: !!projectId,\n  });\n\n  const { data: activeTimer } = useQuery<ActiveTimer | null>({\n    queryKey: ['/api/timer/active'],\n    refetchInterval: 1000, // Update every second\n  });\n\n  const { data: activeTimers = [] } = useQuery<ActiveTimer[]>({\n    queryKey: ['/api/timers/active'],\n    refetchInterval: 1000, // Update every second\n  });\n\n  const form = useForm<InsertTask>({\n    resolver: zodResolver(insertTaskSchema),\n    defaultValues: {\n      projectId: projectId,\n      title: \"\",\n      description: \"\",\n      status: \"todo\",\n      priority: \"medium\",\n    },\n  });\n\n  const createTaskMutation = useMutation({\n    mutationFn: async (data: InsertTask) => {\n      const response = await apiRequest('POST', `/api/projects/${projectId}/tasks`, data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/projects', projectId, 'tasks'] });\n      toast({\n        title: \"Task created\",\n        description: \"Your new task has been created successfully.\",\n      });\n      setNewTaskOpen(false);\n      form.reset();\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to create task. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateTaskMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string, data: Partial<InsertTask> }) => {\n      const response = await apiRequest('PATCH', `/api/tasks/${id}`, data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/projects', projectId, 'tasks'] });\n    },\n  });\n\n  const startTimerMutation = useMutation({\n    mutationFn: async (taskId: string) => {\n      const response = await apiRequest('POST', '/api/timer/start', {\n        taskId,\n        startTime: new Date(),\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/timer/active'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/timers/active'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/projects', projectId, 'tasks'] });\n      toast({\n        title: \"Timer started\",\n        description: \"Time tracking started automatically.\",\n      });\n    },\n  });\n\n  const stopTimerMutation = useMutation({\n    mutationFn: async (taskId?: string) => {\n      const response = await apiRequest('POST', '/api/timer/stop', { taskId });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/timer/active'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/timers/active'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/projects', projectId, 'tasks'] });\n      toast({\n        title: \"Timer stopped\",\n        description: \"Time logged automatically.\",\n      });\n    },\n  });\n\n  const onSubmit = (data: InsertTask) => {\n    createTaskMutation.mutate({ ...data, projectId });\n  };\n\n  const handleDragEnd = async (result: DropResult) => {\n    if (!result.destination) return;\n\n    const taskId = result.draggableId;\n    const oldStatus = result.source.droppableId as 'todo' | 'in_progress' | 'done';\n    const newStatus = result.destination.droppableId as 'todo' | 'in_progress' | 'done';\n\n    // Update task status\n    updateTaskMutation.mutate({\n      id: taskId,\n      data: { status: newStatus }\n    });\n\n    // Auto-start timer when moving to \"in_progress\"\n    if (newStatus === 'in_progress' && oldStatus !== 'in_progress') {\n      // Check if this task already has an active timer\n      const taskHasActiveTimer = activeTimers.some(timer => timer.taskId === taskId);\n      if (!taskHasActiveTimer) {\n        startTimerMutation.mutate(taskId);\n      }\n    }\n    \n    // Auto-stop timer when moving to \"done\" or back to \"todo\"\n    if (oldStatus === 'in_progress' && newStatus !== 'in_progress') {\n      // Find and stop the timer for this specific task\n      const taskActiveTimer = activeTimers.find(timer => timer.taskId === taskId);\n      if (taskActiveTimer) {\n        stopTimerMutation.mutate(taskId);\n      }\n    }\n  };\n\n  const handleStartTimer = (taskId: string) => {\n    startTimerMutation.mutate(taskId);\n  };\n\n  const handleStopTimer = (taskId?: string) => {\n    stopTimerMutation.mutate(taskId);\n  };\n\n  const getTasksByStatus = (status: string) => {\n    return tasks.filter(task => task.status === status);\n  };\n\n  return (\n    <div className=\"h-full p-6 overflow-x-auto\">\n      <DragDropContext onDragEnd={handleDragEnd}>\n        <div className=\"flex space-x-6 h-full min-w-max\">\n          {taskStatuses.map((status) => {\n            const statusTasks = getTasksByStatus(status.id);\n            \n            return (\n              <div key={status.id} className=\"flex-1 bg-ai-card rounded-xl border border-border flex flex-col min-h-0 min-w-80\">\n                <div className=\"p-4 border-b border-border flex items-center justify-between\">\n                  <div className=\"flex items-center\">\n                    <div className={cn(\"w-3 h-3 rounded-full mr-3\", status.color)} />\n                    <h3 className=\"font-semibold text-ai-text\">{status.title}</h3>\n                    <Badge variant=\"secondary\" className=\"ml-2\">\n                      {statusTasks.length}\n                    </Badge>\n                  </div>\n                  <Dialog open={newTaskOpen} onOpenChange={setNewTaskOpen}>\n                    <DialogTrigger asChild>\n                      <Button size=\"sm\" variant=\"ghost\" data-testid={`add-task-${status.id}`}>\n                        <Plus className=\"h-4 w-4 text-muted-foreground\" />\n                      </Button>\n                    </DialogTrigger>\n                    <DialogContent>\n                      <DialogHeader>\n                        <DialogTitle>Create New Task</DialogTitle>\n                        <DialogDescription>\n                          Add a new task to your project.\n                        </DialogDescription>\n                      </DialogHeader>\n                      <Form {...form}>\n                        <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                          <FormField\n                            control={form.control}\n                            name=\"title\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Task Title</FormLabel>\n                                <FormControl>\n                                  <Input \n                                    placeholder=\"Enter task title\" \n                                    data-testid=\"input-task-title\"\n                                    {...field} \n                                  />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n                          <FormField\n                            control={form.control}\n                            name=\"description\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Description</FormLabel>\n                                <FormControl>\n                                  <Textarea \n                                    placeholder=\"Enter task description\"\n                                    data-testid=\"input-task-description\"\n                                    {...field}\n                                    value={field.value || \"\"}\n                                  />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n                          <FormField\n                            control={form.control}\n                            name=\"priority\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Priority</FormLabel>\n                                <Select onValueChange={field.onChange} defaultValue={field.value}>\n                                  <FormControl>\n                                    <SelectTrigger data-testid=\"select-task-priority\">\n                                      <SelectValue placeholder=\"Select priority\" />\n                                    </SelectTrigger>\n                                  </FormControl>\n                                  <SelectContent>\n                                    <SelectItem value=\"low\">Low Priority</SelectItem>\n                                    <SelectItem value=\"medium\">Medium Priority</SelectItem>\n                                    <SelectItem value=\"high\">High Priority</SelectItem>\n                                    <SelectItem value=\"urgent\">Urgent</SelectItem>\n                                  </SelectContent>\n                                </Select>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n                          <FormField\n                            control={form.control}\n                            name=\"status\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Status</FormLabel>\n                                <Select onValueChange={field.onChange} defaultValue={field.value}>\n                                  <FormControl>\n                                    <SelectTrigger data-testid=\"select-task-status\">\n                                      <SelectValue placeholder=\"Select status\" />\n                                    </SelectTrigger>\n                                  </FormControl>\n                                  <SelectContent>\n                                    <SelectItem value=\"todo\">To Do</SelectItem>\n                                    <SelectItem value=\"in_progress\">In Progress</SelectItem>\n                                    <SelectItem value=\"done\">Done</SelectItem>\n                                  </SelectContent>\n                                </Select>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n                          <div className=\"flex justify-end space-x-2\">\n                            <Button \n                              type=\"button\" \n                              variant=\"outline\" \n                              onClick={() => setNewTaskOpen(false)}\n                              data-testid=\"cancel-task\"\n                            >\n                              Cancel\n                            </Button>\n                            <Button \n                              type=\"submit\" \n                              disabled={createTaskMutation.isPending}\n                              data-testid=\"submit-task\"\n                            >\n                              {createTaskMutation.isPending ? \"Creating...\" : \"Create Task\"}\n                            </Button>\n                          </div>\n                        </form>\n                      </Form>\n                    </DialogContent>\n                  </Dialog>\n                </div>\n\n                <Droppable droppableId={status.id}>\n                  {(provided, snapshot) => (\n                    <div \n                      ref={provided.innerRef}\n                      {...provided.droppableProps}\n                      className={cn(\n                        \"flex-1 p-4 space-y-3 overflow-y-auto custom-scrollbar\",\n                        snapshot.isDraggingOver && \"drop-zone-active\"\n                      )}\n                    >\n                      {statusTasks.length === 0 ? (\n                        <div className=\"text-center py-8\">\n                          <p className=\"text-muted-foreground text-sm\">No tasks yet</p>\n                          <p className=\"text-muted-foreground text-xs mt-1\">Drag tasks here or create new ones</p>\n                        </div>\n                      ) : (\n                        statusTasks.map((task, index) => (\n                          <Draggable key={task.id} draggableId={task.id} index={index}>\n                            {(provided, snapshot) => (\n                              <div\n                                ref={provided.innerRef}\n                                {...provided.draggableProps}\n                                {...provided.dragHandleProps}\n                                className={cn(\n                                  \"bg-white dark:bg-ai-card border border-border rounded-lg p-4 shadow-sm hover:shadow-md transition-shadow cursor-pointer\",\n                                  activeTimers.some(timer => timer.taskId === task.id) && \"border-2 border-ai-primary/50\",\n                                  snapshot.isDragging && \"task-card-dragging\"\n                                )}\n                                data-testid={`task-${task.id}`}\n                              >\n                                <div className=\"flex items-start justify-between mb-3\">\n                                  <h4 className=\"font-medium text-ai-text flex-1 line-clamp-2\">\n                                    {task.title}\n                                  </h4>\n                                  <div className=\"flex items-center space-x-2 ml-2\">\n                                    {activeTimers.some(timer => timer.taskId === task.id) ? (\n                                      <div className=\"flex items-center space-x-1\">\n                                        <div className=\"flex items-center space-x-1 bg-red-100 dark:bg-red-900 px-2 py-1 rounded\">\n                                          <div className=\"w-2 h-2 bg-red-500 rounded-full animate-pulse\" />\n                                          <span className=\"text-xs font-medium text-red-600 dark:text-red-400\">\n                                            Active\n                                          </span>\n                                        </div>\n                                        <Button\n                                          size=\"sm\"\n                                          variant=\"ghost\"\n                                          onClick={() => handleStopTimer(task.id)}\n                                          className=\"p-1 h-6 w-6 bg-red-100 hover:bg-red-200 dark:bg-red-900 dark:hover:bg-red-800\"\n                                          data-testid={`stop-timer-${task.id}`}\n                                        >\n                                          <Pause className=\"h-3 w-3 text-red-600\" />\n                                        </Button>\n                                      </div>\n                                    ) : (\n                                      <Button\n                                        size=\"sm\"\n                                        variant=\"ghost\"\n                                        onClick={() => handleStartTimer(task.id)}\n                                        className=\"p-1 h-6 w-6 hover:bg-accent/20\"\n                                        data-testid={`start-timer-${task.id}`}\n                                      >\n                                        <Play className=\"h-3 w-3 text-accent\" />\n                                      </Button>\n                                    )}\n                                    <Button\n                                      size=\"sm\"\n                                      variant=\"ghost\"\n                                      className=\"p-1 h-6 w-6\"\n                                      data-testid={`task-menu-${task.id}`}\n                                    >\n                                      <MoreHorizontal className=\"h-3 w-3 text-muted-foreground\" />\n                                    </Button>\n                                  </div>\n                                </div>\n                                \n                                {task.description && (\n                                  <p className=\"text-sm text-muted-foreground mb-3 line-clamp-2\">\n                                    {task.description}\n                                  </p>\n                                )}\n                                \n                                <div className=\"flex items-center justify-between\">\n                                  <div className=\"flex items-center space-x-2\">\n                                    <Badge \n                                      variant=\"secondary\" \n                                      className={cn(\"text-xs\", priorityColors[task.priority as keyof typeof priorityColors])}\n                                    >\n                                      {task.priority.charAt(0).toUpperCase() + task.priority.slice(1)} Priority\n                                    </Badge>\n                                    {task.noteId && (\n                                      <Button\n                                        size=\"sm\"\n                                        variant=\"ghost\"\n                                        className=\"text-xs text-ai-secondary hover:text-ai-secondary/80 p-0 h-auto\"\n                                        data-testid={`note-link-${task.id}`}\n                                      >\n                                        <Link className=\"h-3 w-3 mr-1\" />\n                                        From note\n                                      </Button>\n                                    )}\n                                  </div>\n                                  \n                                  <div className=\"text-xs text-muted-foreground\">\n                                    {task.totalTime > 0 && (\n                                      <span className=\"text-accent\">\n                                        Total: {formatTime(task.totalTime)}\n                                      </span>\n                                    )}\n                                    {task.dueDate && (\n                                      <span className=\"ml-2\">\n                                        <Calendar className=\"h-3 w-3 inline mr-1\" />\n                                        Due {new Date(task.dueDate).toLocaleDateString()}\n                                      </span>\n                                    )}\n                                  </div>\n                                </div>\n                              </div>\n                            )}\n                          </Draggable>\n                        ))\n                      )}\n                      {provided.placeholder}\n                    </div>\n                  )}\n                </Droppable>\n              </div>\n            );\n          })}\n        </div>\n      </DragDropContext>\n    </div>\n  );\n}\n","size_bytes":20850},"client/src/components/notes-editor.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { insertNoteSchema } from \"@shared/schema\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport RichTextEditor from \"@/components/ui/rich-text-editor\";\nimport { Search, Plus, Share, Bot, Lightbulb, Link, Sparkles } from \"lucide-react\";\nimport { Badge } from \"@/components/ui/badge\";\nimport type { NoteWithTaskCount, InsertNote } from \"@shared/schema\";\nimport { cn } from \"@/lib/utils\";\nimport { formatDistanceToNow } from \"date-fns\";\n\ninterface NotesEditorProps {\n  projectId: string;\n}\n\nexport default function NotesEditor({ projectId }: NotesEditorProps) {\n  const [selectedNote, setSelectedNote] = useState<string | null>(null);\n  const [newNoteOpen, setNewNoteOpen] = useState(false);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [extractingTasks, setExtractingTasks] = useState(false);\n  const { toast } = useToast();\n\n  const { data: notes = [] } = useQuery<NoteWithTaskCount[]>({\n    queryKey: ['/api/projects', projectId, 'notes'],\n    enabled: !!projectId,\n  });\n\n  const { data: currentNote } = useQuery({\n    queryKey: ['/api/notes', selectedNote],\n    enabled: !!selectedNote,\n  });\n\n  const form = useForm<InsertNote>({\n    resolver: zodResolver(insertNoteSchema),\n    defaultValues: {\n      projectId: projectId,\n      title: \"\",\n      content: \"\",\n    },\n  });\n\n  const createNoteMutation = useMutation({\n    mutationFn: async (data: InsertNote) => {\n      const response = await apiRequest('POST', `/api/projects/${projectId}/notes`, data);\n      return response.json();\n    },\n    onSuccess: async (note) => {\n      queryClient.invalidateQueries({ queryKey: ['/api/projects', projectId, 'notes'] });\n      \n      // Auto-extract tasks from new note if it has content\n      if (note.content && note.content.trim().length > 0) {\n        try {\n          await apiRequest('POST', `/api/notes/${note.id}/extract-tasks`);\n          queryClient.invalidateQueries({ queryKey: ['/api/projects', projectId, 'tasks'] });\n          toast({\n            title: \"Note created & tasks extracted\",\n            description: \"Your note has been created and tasks were automatically extracted.\",\n          });\n        } catch (error) {\n          toast({\n            title: \"Note created\",\n            description: \"Your note has been created successfully.\",\n          });\n        }\n      } else {\n        toast({\n          title: \"Note created\",\n          description: \"Your new note has been created successfully.\",\n        });\n      }\n      \n      setNewNoteOpen(false);\n      form.reset();\n      setSelectedNote(note.id);\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to create note. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateNoteMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string, data: Partial<InsertNote> }) => {\n      const response = await apiRequest('PATCH', `/api/notes/${id}`, data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/projects', projectId, 'notes'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/notes', selectedNote] });\n      queryClient.invalidateQueries({ queryKey: ['/api/projects', projectId, 'tasks'] });\n    },\n  });\n\n  const extractTasksMutation = useMutation({\n    mutationFn: async (noteId: string) => {\n      const response = await apiRequest('POST', `/api/notes/${noteId}/extract-tasks`);\n      return response.json();\n    },\n    onSuccess: (result) => {\n      queryClient.invalidateQueries({ queryKey: ['/api/projects', projectId, 'notes'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/projects', projectId, 'tasks'] });\n      toast({\n        title: \"Tasks extracted\",\n        description: `Successfully extracted ${result.count} tasks from your note.`,\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to extract tasks. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const filteredNotes = notes.filter(note =>\n    note.title.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    note.content.toLowerCase().includes(searchQuery.toLowerCase())\n  );\n\n  const onSubmit = (data: InsertNote) => {\n    createNoteMutation.mutate({ ...data, projectId });\n  };\n\n  const handleNoteUpdate = (field: 'title' | 'content', value: string) => {\n    if (!selectedNote) return;\n    updateNoteMutation.mutate({\n      id: selectedNote,\n      data: { [field]: value }\n    });\n  };\n\n  const handleExtractTasks = async () => {\n    if (!selectedNote) return;\n    setExtractingTasks(true);\n    try {\n      await extractTasksMutation.mutateAsync(selectedNote);\n    } finally {\n      setExtractingTasks(false);\n    }\n  };\n\n  return (\n    <div className=\"h-full flex\">\n      {/* Notes List */}\n      <div className=\"w-80 bg-ai-card border-r border-border flex flex-col\">\n        <div className=\"p-4 border-b border-border\">\n          <div className=\"flex items-center justify-between mb-3\">\n            <h3 className=\"font-semibold text-ai-text\">Notes</h3>\n            <Dialog open={newNoteOpen} onOpenChange={setNewNoteOpen}>\n              <DialogTrigger asChild>\n                <Button size=\"sm\" variant=\"ghost\" data-testid=\"create-note\">\n                  <Plus className=\"h-4 w-4 text-ai-primary\" />\n                </Button>\n              </DialogTrigger>\n              <DialogContent>\n                <DialogHeader>\n                  <DialogTitle>Create New Note</DialogTitle>\n                  <DialogDescription>\n                    Create a new note for your project.\n                  </DialogDescription>\n                </DialogHeader>\n                <Form {...form}>\n                  <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"title\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Note Title</FormLabel>\n                          <FormControl>\n                            <Input \n                              placeholder=\"Enter note title\" \n                              data-testid=\"input-note-title\"\n                              {...field} \n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <div className=\"flex justify-end space-x-2\">\n                      <Button \n                        type=\"button\" \n                        variant=\"outline\" \n                        onClick={() => setNewNoteOpen(false)}\n                        data-testid=\"cancel-note\"\n                      >\n                        Cancel\n                      </Button>\n                      <Button \n                        type=\"submit\" \n                        disabled={createNoteMutation.isPending}\n                        data-testid=\"submit-note\"\n                      >\n                        {createNoteMutation.isPending ? \"Creating...\" : \"Create Note\"}\n                      </Button>\n                    </div>\n                  </form>\n                </Form>\n              </DialogContent>\n            </Dialog>\n          </div>\n          <div className=\"relative\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n            <Input\n              type=\"text\"\n              placeholder=\"Search notes...\"\n              className=\"pl-10\"\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n              data-testid=\"search-notes\"\n            />\n          </div>\n        </div>\n\n        <div className=\"flex-1 overflow-y-auto p-2 custom-scrollbar\">\n          {filteredNotes.length === 0 ? (\n            <div className=\"text-center py-8\">\n              <p className=\"text-muted-foreground text-sm\">No notes found</p>\n              <p className=\"text-muted-foreground text-xs mt-1\">\n                {searchQuery ? \"Try adjusting your search\" : \"Create your first note to get started\"}\n              </p>\n            </div>\n          ) : (\n            filteredNotes.map((note) => (\n              <button\n                key={note.id}\n                onClick={() => setSelectedNote(note.id)}\n                className={cn(\n                  \"w-full p-3 rounded-lg cursor-pointer mb-2 text-left transition-colors\",\n                  selectedNote === note.id\n                    ? \"bg-ai-primary/10 border border-ai-primary/20\"\n                    : \"hover:bg-muted\"\n                )}\n                data-testid={`note-${note.id}`}\n              >\n                <div className=\"font-medium text-ai-text mb-1\">{note.title}</div>\n                <div className=\"text-sm text-muted-foreground mb-2 line-clamp-2\">\n                  {note.content.replace(/<[^>]*>/g, '').substring(0, 100)}...\n                </div>\n                <div className=\"flex items-center justify-between text-xs text-muted-foreground\">\n                  <span>{formatDistanceToNow(new Date(note.updatedAt), { addSuffix: true })}</span>\n                  {note.tasksExtracted > 0 && (\n                    <div className=\"flex items-center space-x-1\">\n                      <Bot className=\"h-3 w-3 text-ai-secondary\" />\n                      <span>{note.tasksExtracted} tasks</span>\n                    </div>\n                  )}\n                </div>\n              </button>\n            ))\n          )}\n        </div>\n      </div>\n\n      {/* Rich Text Editor */}\n      <div className=\"flex-1 flex flex-col\">\n        {selectedNote ? (\n          <>\n            {/* Editor Toolbar */}\n            <div className=\"bg-ai-card border-b border-border p-3\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center space-x-2\">\n                  <Button \n                    size=\"sm\" \n                    variant=\"outline\"\n                    onClick={handleExtractTasks}\n                    disabled={extractingTasks || !currentNote}\n                    className=\"bg-ai-secondary bg-opacity-10 text-ai-secondary hover:bg-ai-secondary hover:bg-opacity-20 border-ai-secondary border-opacity-30\"\n                    data-testid=\"extract-tasks\"\n                  >\n                    {extractingTasks ? (\n                      <>\n                        <Sparkles className=\"h-4 w-4 mr-2 animate-spin\" />\n                        Extracting...\n                      </>\n                    ) : (\n                      <>\n                        <Bot className=\"h-4 w-4 mr-2\" />\n                        Extract Tasks\n                      </>\n                    )}\n                  </Button>\n                  <Button \n                    size=\"sm\" \n                    variant=\"outline\"\n                    onClick={() => window.location.hash = '#tasks'}\n                    data-testid=\"quick-create-task\"\n                  >\n                    <Plus className=\"h-4 w-4 mr-2\" />\n                    Quick Task\n                  </Button>\n                  <Button size=\"sm\" variant=\"ghost\" data-testid=\"ai-suggestions\">\n                    <Lightbulb className=\"h-4 w-4 text-orange-500\" />\n                  </Button>\n                </div>\n\n                <div className=\"flex items-center space-x-2\">\n                  <span className=\"text-sm text-muted-foreground\">Auto-saved</span>\n                  <Button size=\"sm\" className=\"bg-accent text-white hover:bg-accent/90\" data-testid=\"share-note\">\n                    <Share className=\"h-4 w-4 mr-1\" />\n                    Share\n                  </Button>\n                </div>\n              </div>\n            </div>\n\n            {/* Editor Content */}\n            <div className=\"flex-1 overflow-y-auto custom-scrollbar\">\n              {currentNote ? (\n                <div className=\"p-6 max-w-4xl mx-auto\">\n                  <Input\n                    value={(currentNote as any)?.title || \"\"}\n                    onChange={(e) => handleNoteUpdate('title', e.target.value)}\n                    className=\"text-3xl font-bold border-none shadow-none p-0 mb-6 bg-transparent\"\n                    placeholder=\"Note title...\"\n                    data-testid=\"note-title-input\"\n                  />\n                  \n                  <RichTextEditor\n                    content={(currentNote as any)?.content || \"\"}\n                    onChange={(content) => handleNoteUpdate('content', content)}\n                    placeholder=\"Start writing your note...\"\n                  />\n                </div>\n              ) : (\n                <div className=\"flex items-center justify-center h-full\">\n                  <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-ai-primary\"></div>\n                </div>\n              )}\n            </div>\n          </>\n        ) : (\n          <div className=\"flex-1 flex items-center justify-center bg-muted/30\">\n            <div className=\"text-center\">\n              <div className=\"w-16 h-16 bg-ai-primary/10 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <Plus className=\"h-8 w-8 text-ai-primary\" />\n              </div>\n              <h3 className=\"text-lg font-semibold text-ai-text mb-2\">No note selected</h3>\n              <p className=\"text-muted-foreground mb-4\">\n                Select a note from the sidebar or create a new one\n              </p>\n              <Button \n                onClick={() => setNewNoteOpen(true)}\n                className=\"bg-ai-primary text-white hover:bg-ai-primary/90\"\n                data-testid=\"create-first-note\"\n              >\n                <Plus className=\"h-4 w-4 mr-2\" />\n                Create your first note\n              </Button>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":14522},"client/src/components/sidebar.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { insertProjectSchema } from \"@shared/schema\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Plus, Settings, ChevronRight, PlusCircle, Clock, BarChart3 } from \"lucide-react\";\nimport type { ProjectWithStats, InsertProject } from \"@shared/schema\";\nimport { cn } from \"@/lib/utils\";\n\ninterface SidebarProps {\n  isOpen: boolean;\n  onProjectSelect: (projectId: string) => void;\n  currentProjectId: string;\n}\n\nconst projectColors = [\n  '#6366F1', '#8B5CF6', '#10B981', '#F59E0B', '#EF4444', '#06B6D4', '#8B5CF6', '#F97316'\n];\n\nexport default function Sidebar({ isOpen, onProjectSelect, currentProjectId }: SidebarProps) {\n  const [newProjectOpen, setNewProjectOpen] = useState(false);\n  const { toast } = useToast();\n\n  const { data: projects = [] } = useQuery<ProjectWithStats[]>({\n    queryKey: ['/api/projects'],\n  });\n\n  const form = useForm<InsertProject>({\n    resolver: zodResolver(insertProjectSchema),\n    defaultValues: {\n      name: \"\",\n      description: \"\",\n      color: projectColors[0],\n    },\n  });\n\n  const createProjectMutation = useMutation({\n    mutationFn: async (data: InsertProject) => {\n      const response = await apiRequest('POST', '/api/projects', data);\n      return response.json();\n    },\n    onSuccess: (project) => {\n      queryClient.invalidateQueries({ queryKey: ['/api/projects'] });\n      toast({\n        title: \"Project created\",\n        description: \"Your new project has been created successfully.\",\n      });\n      setNewProjectOpen(false);\n      form.reset();\n      onProjectSelect(project.id);\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to create project. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: InsertProject) => {\n    createProjectMutation.mutate(data);\n  };\n\n  if (!isOpen) {\n    return (\n      <div className=\"w-16 bg-ai-card border-r border-border flex flex-col items-center py-4\">\n        <Button variant=\"ghost\" size=\"sm\" className=\"mb-4\">\n          <Plus className=\"h-5 w-5\" />\n        </Button>\n        {projects.map((project, index) => (\n          <button\n            key={project.id}\n            onClick={() => onProjectSelect(project.id)}\n            className={cn(\n              \"w-10 h-10 rounded-full mb-2 flex items-center justify-center text-white font-medium text-sm transition-colors\",\n              currentProjectId === project.id ? \"ring-2 ring-primary\" : \"\"\n            )}\n            style={{ backgroundColor: project.color }}\n            data-testid={`project-${project.id}`}\n          >\n            {project.name.charAt(0).toUpperCase()}\n          </button>\n        ))}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"w-80 bg-ai-card border-r border-border flex flex-col transition-all duration-300 shadow-sm\">\n      {/* Sidebar Header */}\n      <div className=\"p-4 border-b border-border\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <h1 className=\"text-xl font-semibold text-ai-text\">AI Notes & Tasks</h1>\n        </div>\n        \n        <Dialog open={newProjectOpen} onOpenChange={setNewProjectOpen}>\n          <DialogTrigger asChild>\n            <Button \n              className=\"w-full bg-ai-primary text-white hover:bg-ai-primary/90\"\n              data-testid=\"create-project\"\n            >\n              <Plus className=\"h-4 w-4 mr-2\" />\n              New Project\n            </Button>\n          </DialogTrigger>\n          <DialogContent>\n            <DialogHeader>\n              <DialogTitle>Create New Project</DialogTitle>\n              <DialogDescription>\n                Create a new project to organize your notes and tasks.\n              </DialogDescription>\n            </DialogHeader>\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                <FormField\n                  control={form.control}\n                  name=\"name\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Project Name</FormLabel>\n                      <FormControl>\n                        <Input \n                          placeholder=\"Enter project name\" \n                          data-testid=\"input-project-name\"\n                          {...field} \n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={form.control}\n                  name=\"description\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Description (Optional)</FormLabel>\n                      <FormControl>\n                        <Input \n                          placeholder=\"Enter project description\" \n                          data-testid=\"input-project-description\"\n                          {...field}\n                          value={field.value || \"\"}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={form.control}\n                  name=\"color\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Color</FormLabel>\n                      <FormControl>\n                        <div className=\"flex space-x-2\">\n                          {projectColors.map((color) => (\n                            <button\n                              key={color}\n                              type=\"button\"\n                              onClick={() => field.onChange(color)}\n                              className={cn(\n                                \"w-8 h-8 rounded-full border-2 border-transparent\",\n                                field.value === color && \"border-primary\"\n                              )}\n                              style={{ backgroundColor: color }}\n                              data-testid={`color-${color}`}\n                            />\n                          ))}\n                        </div>\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <div className=\"flex justify-end space-x-2\">\n                  <Button \n                    type=\"button\" \n                    variant=\"outline\" \n                    onClick={() => setNewProjectOpen(false)}\n                    data-testid=\"cancel-project\"\n                  >\n                    Cancel\n                  </Button>\n                  <Button \n                    type=\"submit\" \n                    disabled={createProjectMutation.isPending}\n                    data-testid=\"submit-project\"\n                  >\n                    {createProjectMutation.isPending ? \"Creating...\" : \"Create Project\"}\n                  </Button>\n                </div>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      {/* Project Navigation */}\n      <div className=\"flex-1 overflow-y-auto p-4 custom-scrollbar\">\n        <div className=\"mb-6\">\n          <h3 className=\"text-sm font-medium text-muted-foreground mb-3 uppercase tracking-wider\">\n            Projects\n          </h3>\n          \n          <div className=\"space-y-1\">\n            {projects.length === 0 ? (\n              <div className=\"text-center py-8\">\n                <p className=\"text-muted-foreground text-sm\">No projects yet</p>\n                <p className=\"text-muted-foreground text-xs mt-1\">Create your first project to get started</p>\n              </div>\n            ) : (\n              projects.map((project) => (\n                <button\n                  key={project.id}\n                  onClick={() => onProjectSelect(project.id)}\n                  className={cn(\n                    \"w-full flex items-center p-3 rounded-lg cursor-pointer group transition-colors\",\n                    currentProjectId === project.id\n                      ? \"bg-ai-primary/10 border border-ai-primary/20\"\n                      : \"hover:bg-muted\"\n                  )}\n                  data-testid={`project-${project.id}`}\n                >\n                  <div \n                    className=\"w-3 h-3 rounded-full mr-3\"\n                    style={{ backgroundColor: project.color }}\n                  />\n                  <div className=\"flex-1 text-left\">\n                    <div className=\"font-medium text-ai-text\">{project.name}</div>\n                    <div className=\"text-sm text-muted-foreground\">\n                      {project.taskCount} tasks\n                    </div>\n                  </div>\n                  <ChevronRight className={cn(\n                    \"h-4 w-4 transition-colors\",\n                    currentProjectId === project.id \n                      ? \"text-ai-primary\" \n                      : \"text-muted-foreground group-hover:text-ai-primary\"\n                  )} />\n                </button>\n              ))\n            )}\n          </div>\n        </div>\n\n        {/* Quick Actions */}\n        <div className=\"mb-6\">\n          <h3 className=\"text-sm font-medium text-muted-foreground mb-3 uppercase tracking-wider\">\n            Quick Actions\n          </h3>\n          <div className=\"space-y-1\">\n            <Button \n              variant=\"ghost\" \n              className=\"w-full justify-start\"\n              data-testid=\"quick-new-note\"\n            >\n              <PlusCircle className=\"h-4 w-4 mr-3 text-accent\" />\n              <span className=\"font-medium\">New Note</span>\n            </Button>\n            <Button \n              variant=\"ghost\" \n              className=\"w-full justify-start\"\n              data-testid=\"quick-time-tracking\"\n            >\n              <Clock className=\"h-4 w-4 mr-3 text-ai-secondary\" />\n              <span className=\"font-medium\">Time Tracking</span>\n            </Button>\n            <Button \n              variant=\"ghost\" \n              className=\"w-full justify-start\"\n              data-testid=\"quick-reports\"\n            >\n              <BarChart3 className=\"h-4 w-4 mr-3 text-ai-primary\" />\n              <span className=\"font-medium\">Reports</span>\n            </Button>\n          </div>\n        </div>\n      </div>\n\n      {/* User Profile */}\n      <div className=\"p-4 border-t border-border\">\n        <Button \n          variant=\"ghost\" \n          className=\"w-full justify-start p-3\"\n          data-testid=\"user-profile\"\n        >\n          <div className=\"w-8 h-8 bg-ai-primary rounded-full flex items-center justify-center text-white font-medium mr-3\">\n            JD\n          </div>\n          <div className=\"flex-1 text-left\">\n            <div className=\"font-medium text-ai-text\">John Doe</div>\n            <div className=\"text-sm text-muted-foreground\">Pro Plan</div>\n          </div>\n          <Settings className=\"h-4 w-4 text-muted-foreground hover:text-ai-primary transition-colors\" />\n        </Button>\n      </div>\n    </div>\n  );\n}\n","size_bytes":11715},"client/src/components/time-tracking.tsx":{"content":"import { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Clock, Calendar, TrendingUp, Play, OctagonMinus, Pause, Download, Edit } from \"lucide-react\";\nimport { formatTime, formatDuration } from \"@/lib/time-utils\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { cn } from \"@/lib/utils\";\nimport { useState, useEffect } from \"react\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface TimeTrackingProps {\n  projectId: string;\n}\n\nexport default function TimeTracking({ projectId }: TimeTrackingProps) {\n  const [currentTime, setCurrentTime] = useState(new Date());\n  const [selectedPeriod, setSelectedPeriod] = useState(\"week\");\n  const { toast } = useToast();\n\n  const { data: tasks = [] } = useQuery({\n    queryKey: ['/api/projects', projectId, 'tasks'],\n    enabled: !!projectId,\n  });\n\n  const { data: activeTimer } = useQuery({\n    queryKey: ['/api/timer/active'],\n    refetchInterval: 1000, // Update every second\n  });\n\n  const { data: activeTimers = [] } = useQuery({\n    queryKey: ['/api/timers/active'],\n    refetchInterval: 1000, // Update every second\n  });\n\n  // Update current time every second\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setCurrentTime(new Date());\n    }, 1000);\n    return () => clearInterval(interval);\n  }, []);\n\n  // Calculate active timer duration\n  const getActiveTimerDuration = () => {\n    if (!activeTimer) return 0;\n    return Math.floor((currentTime.getTime() - new Date((activeTimer as any)?.startTime).getTime()) / 1000);\n  };\n\n  // Calculate duration for specific timer\n  const getTimerDuration = (timer: any) => {\n    if (!timer) return 0;\n    return Math.floor((currentTime.getTime() - new Date(timer.startTime).getTime()) / 1000);\n  };\n\n  // Get all active tasks\n  const getActiveTasksWithTimers = () => {\n    return (activeTimers as any[]).map((timer: any) => {\n      const task = (tasks as any[]).find((task: any) => task.id === timer.taskId);\n      return {\n        timer,\n        task,\n        duration: getTimerDuration(timer)\n      };\n    });\n  };\n\n  // Get the active task (for backward compatibility)\n  const activeTask = activeTimer ? (tasks as any[]).find((task: any) => task.id === (activeTimer as any)?.taskId) : null;\n\n  const activeTasksWithTimers = getActiveTasksWithTimers();\n\n  const stopTimerMutation = useMutation({\n    mutationFn: async (taskId: string) => {\n      const response = await apiRequest('POST', '/api/timer/stop', { taskId });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/timer/active'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/timers/active'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/projects', projectId, 'tasks'] });\n      toast({\n        title: \"Timer stopped\",\n        description: \"Time logged successfully.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\", \n        description: \"Failed to stop timer. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Calculate time statistics\n  const totalTimeToday = (tasks as any[]).reduce((sum: number, task: any) => sum + (task.totalTime || 0), 0);\n  const totalTimeWeek = totalTimeToday; // Simplified for demo\n  const averagePerDay = Math.floor(totalTimeWeek / 7);\n\n  // Mock time entries for display\n  const recentTimeEntries = [\n    {\n      id: '1',\n      taskTitle: 'Define target audience',\n      projectName: 'Marketing Campaign',\n      date: 'Oct 24, 2024',\n      duration: 13500, // 3h 45m in seconds\n      color: '#10B981'\n    },\n    {\n      id: '2', \n      taskTitle: 'Research competitor campaigns',\n      projectName: 'Marketing Campaign',\n      date: 'Oct 23, 2024',\n      duration: 4980, // 1h 23m in seconds\n      color: '#6366F1'\n    },\n    {\n      id: '3',\n      taskTitle: 'Set up analytics tracking',\n      projectName: 'Marketing Campaign', \n      date: 'Oct 22, 2024',\n      duration: 8100, // 2h 15m in seconds\n      color: '#8B5CF6'\n    }\n  ];\n\n  return (\n    <div className=\"h-full p-6 overflow-y-auto custom-scrollbar\">\n      <div className=\"max-w-6xl mx-auto\">\n        {/* Time Summary Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Today</CardTitle>\n              <Clock className=\"h-4 w-4 text-ai-primary\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-ai-text mb-1\" data-testid=\"time-today\">\n                {formatTime(totalTimeToday)}\n              </div>\n              <CardDescription className=\"text-sm\">+1h 15m from yesterday</CardDescription>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">This Week</CardTitle>\n              <Calendar className=\"h-4 w-4 text-ai-secondary\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-ai-text mb-1\" data-testid=\"time-week\">\n                {formatTime(totalTimeWeek)}\n              </div>\n              <CardDescription className=\"text-sm\">5 days tracked</CardDescription>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Avg Per Day</CardTitle>\n              <TrendingUp className=\"h-4 w-4 text-accent\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-ai-text mb-1\" data-testid=\"time-average\">\n                {formatTime(averagePerDay)}\n              </div>\n              <CardDescription className=\"text-sm text-accent\">+12% this week</CardDescription>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Active Timers</CardTitle>\n              <Play className=\"h-4 w-4 text-red-500\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-ai-text mb-1\" data-testid=\"active-timer\">\n                {activeTasksWithTimers.length}\n              </div>\n              <CardDescription className=\"text-sm\">\n                {activeTasksWithTimers.length === 0 ? \"No active timers\" : \n                 activeTasksWithTimers.length === 1 ? \"1 task running\" : \n                 `${activeTasksWithTimers.length} tasks running`}\n              </CardDescription>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Current Activities - Show all active timers */}\n        {activeTasksWithTimers.length > 0 && (\n          <Card className=\"mb-8\">\n            <CardHeader>\n              <CardTitle className=\"text-lg font-semibold text-ai-text\">\n                Current Activities ({activeTasksWithTimers.length} running)\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {activeTasksWithTimers.map(({ timer, task, duration }, index) => (\n                  <div key={timer.id} className=\"flex items-center justify-between p-4 bg-red-50 dark:bg-red-950/30 border border-red-200 dark:border-red-800 rounded-lg\">\n                    <div className=\"flex items-center space-x-4\">\n                      <div className=\"w-3 h-3 bg-red-500 rounded-full animate-pulse\"></div>\n                      <div>\n                        <div className=\"font-medium text-ai-text\" data-testid={`current-task-title-${index}`}>\n                          {task?.title || 'Unknown Task'}\n                        </div>\n                        <div className=\"text-sm text-muted-foreground\">\n                          Marketing Campaign • {task?.status?.replace('_', ' ') || 'in progress'}\n                        </div>\n                      </div>\n                    </div>\n                    <div className=\"flex items-center space-x-4\">\n                      <div className=\"text-2xl font-bold text-red-600\" data-testid={`current-timer-${index}`}>\n                        {formatTime(duration)}\n                      </div>\n                      <div className=\"flex items-center space-x-2\">\n                        <Button \n                          className=\"bg-red-600 text-white hover:bg-red-700\"\n                          onClick={() => task && stopTimerMutation.mutate(task.id)}\n                          disabled={stopTimerMutation.isPending}\n                          data-testid={`stop-timer-${task?.id}`}\n                        >\n                          <OctagonMinus className=\"h-4 w-4 mr-2\" />\n                          {stopTimerMutation.isPending ? \"Stopping...\" : \"Stop\"}\n                        </Button>\n                        <Button \n                          variant=\"outline\"\n                          data-testid={`pause-timer-${task?.id}`}\n                        >\n                          <Pause className=\"h-4 w-4 mr-2\" />\n                          Pause\n                        </Button>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Time Entries */}\n        <Card>\n          <CardHeader>\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <CardTitle className=\"text-lg font-semibold text-ai-text\">Recent Time Entries</CardTitle>\n                <CardDescription>Track your time across tasks and projects</CardDescription>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <Select value={selectedPeriod} onValueChange={setSelectedPeriod}>\n                  <SelectTrigger className=\"w-32\" data-testid=\"select-time-period\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"today\">Today</SelectItem>\n                    <SelectItem value=\"week\">This Week</SelectItem>\n                    <SelectItem value=\"month\">This Month</SelectItem>\n                  </SelectContent>\n                </Select>\n                <Button variant=\"outline\" size=\"sm\" data-testid=\"export-time-entries\">\n                  <Download className=\"h-4 w-4 mr-2\" />\n                  Export\n                </Button>\n              </div>\n            </div>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-3\">\n              {recentTimeEntries.length === 0 ? (\n                <div className=\"text-center py-8\">\n                  <Clock className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n                  <p className=\"text-muted-foreground text-sm\">No time entries yet</p>\n                  <p className=\"text-muted-foreground text-xs mt-1\">Start tracking time on your tasks</p>\n                </div>\n              ) : (\n                recentTimeEntries.map((entry) => (\n                  <div \n                    key={entry.id}\n                    className=\"flex items-center justify-between p-4 hover:bg-muted/50 rounded-lg transition-colors\"\n                    data-testid={`time-entry-${entry.id}`}\n                  >\n                    <div className=\"flex items-center space-x-4\">\n                      <div \n                        className=\"w-3 h-3 rounded-full\"\n                        style={{ backgroundColor: entry.color }}\n                      />\n                      <div>\n                        <div className=\"font-medium text-ai-text\">{entry.taskTitle}</div>\n                        <div className=\"text-sm text-muted-foreground\">{entry.projectName}</div>\n                      </div>\n                    </div>\n                    <div className=\"flex items-center space-x-6\">\n                      <span className=\"text-sm text-muted-foreground\">{entry.date}</span>\n                      <span className=\"font-medium text-ai-text\" data-testid={`entry-duration-${entry.id}`}>\n                        {formatTime(entry.duration)}\n                      </span>\n                      <Button \n                        size=\"sm\" \n                        variant=\"ghost\" \n                        className=\"text-muted-foreground hover:text-ai-primary\"\n                        data-testid={`edit-entry-${entry.id}`}\n                      >\n                        <Edit className=\"h-4 w-4\" />\n                      </Button>\n                    </div>\n                  </div>\n                ))\n              )}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":13254},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/time-utils.ts":{"content":"export function formatTime(seconds: number): string {\n  const hours = Math.floor(seconds / 3600);\n  const minutes = Math.floor((seconds % 3600) / 60);\n  const secs = seconds % 60;\n  \n  return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\n}\n\nexport function formatDuration(seconds: number): string {\n  const hours = Math.floor(seconds / 3600);\n  const minutes = Math.floor((seconds % 3600) / 60);\n  \n  if (hours > 0) {\n    return `${hours}h ${minutes}m`;\n  } else if (minutes > 0) {\n    return `${minutes}m`;\n  } else {\n    return `${seconds}s`;\n  }\n}\n\nexport function parseTimeInput(timeString: string): number {\n  // Parse formats like \"2h 30m\", \"1:30\", \"90m\", etc.\n  const hourMinuteRegex = /^(\\d+)h\\s*(\\d+)m$/i;\n  const colonFormatRegex = /^(\\d+):(\\d+)$/;\n  const minutesOnlyRegex = /^(\\d+)m$/i;\n  const hoursOnlyRegex = /^(\\d+)h$/i;\n  \n  let match = timeString.match(hourMinuteRegex);\n  if (match) {\n    return parseInt(match[1]) * 3600 + parseInt(match[2]) * 60;\n  }\n  \n  match = timeString.match(colonFormatRegex);\n  if (match) {\n    return parseInt(match[1]) * 3600 + parseInt(match[2]) * 60;\n  }\n  \n  match = timeString.match(minutesOnlyRegex);\n  if (match) {\n    return parseInt(match[1]) * 60;\n  }\n  \n  match = timeString.match(hoursOnlyRegex);\n  if (match) {\n    return parseInt(match[1]) * 3600;\n  }\n  \n  return 0;\n}\n\nexport function getTimeOfDay(): 'morning' | 'afternoon' | 'evening' {\n  const hour = new Date().getHours();\n  if (hour < 12) return 'morning';\n  if (hour < 17) return 'afternoon';\n  return 'evening';\n}\n\nexport function getRelativeTimeString(date: Date): string {\n  const now = new Date();\n  const diffInSeconds = Math.floor((now.getTime() - date.getTime()) / 1000);\n  \n  if (diffInSeconds < 60) return 'just now';\n  if (diffInSeconds < 3600) return `${Math.floor(diffInSeconds / 60)} minutes ago`;\n  if (diffInSeconds < 86400) return `${Math.floor(diffInSeconds / 3600)} hours ago`;\n  if (diffInSeconds < 604800) return `${Math.floor(diffInSeconds / 86400)} days ago`;\n  \n  return date.toLocaleDateString();\n}\n","size_bytes":2109},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/dashboard.tsx":{"content":"import { useState } from \"react\";\nimport { useParams } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport Sidebar from \"@/components/sidebar\";\nimport NotesEditor from \"@/components/notes-editor\";\nimport KanbanBoard from \"@/components/kanban-board\";\nimport TimeTracking from \"@/components/time-tracking\";\nimport SpaceSwitcher from \"@/components/space-switcher\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Share, MoreHorizontal, Menu, Edit, CheckSquare, Clock } from \"lucide-react\";\n\ntype TabType = 'notes' | 'tasks' | 'time';\ntype SpaceType = 'personal' | 'professional';\n\nexport default function Dashboard() {\n  const { id: projectId } = useParams();\n  const [activeTab, setActiveTab] = useState<TabType>('notes');\n  const [sidebarOpen, setSidebarOpen] = useState(true);\n  const [currentProjectId, setCurrentProjectId] = useState(projectId || 'project-1');\n  const [currentSpace, setCurrentSpace] = useState<SpaceType>('personal');\n\n  const { data: project } = useQuery({\n    queryKey: ['/api/projects', currentProjectId],\n    enabled: !!currentProjectId,\n  });\n\n  const { data: aiStatus } = useQuery({\n    queryKey: ['/api/timer/active'],\n  });\n\n  const tabs: { id: TabType; label: string; icon: any }[] = [\n    { id: 'notes', label: 'Notes', icon: Edit },\n    { id: 'tasks', label: 'Tasks', icon: CheckSquare },\n    { id: 'time', label: 'Time Tracking', icon: Clock },\n  ];\n\n  return (\n    <div className=\"flex h-screen overflow-hidden bg-ai-background\">\n      <Sidebar \n        isOpen={sidebarOpen}\n        onProjectSelect={setCurrentProjectId}\n        currentProjectId={currentProjectId}\n      />\n      \n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        {/* Main Header */}\n        <div className=\"bg-ai-card border-b border-border p-4 shadow-sm\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-4\">\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => setSidebarOpen(!sidebarOpen)}\n                data-testid=\"toggle-sidebar\"\n              >\n                <Menu className=\"h-5 w-5\" />\n              </Button>\n              <h2 className=\"text-2xl font-semibold text-ai-text\">\n                {(project as any)?.name || 'Loading...'}\n              </h2>\n              <div className=\"flex items-center space-x-2\">\n                <Badge variant=\"secondary\" className=\"bg-accent/10 text-accent\">\n                  Active\n                </Badge>\n                <span className=\"text-gray-500\">•</span>\n                <span className=\"text-sm text-muted-foreground\">Last updated 2 hours ago</span>\n              </div>\n            </div>\n            <div className=\"flex items-center space-x-3\">\n              {/* Space Switcher */}\n              <SpaceSwitcher \n                currentSpace={currentSpace}\n                onSpaceChange={setCurrentSpace}\n              />\n              \n              {/* AI Status Indicator */}\n              <div className=\"flex items-center space-x-2 px-3 py-1 bg-ai-secondary/10 rounded-lg\">\n                <div className=\"w-2 h-2 bg-ai-secondary rounded-full animate-pulse-ai\"></div>\n                <span className=\"text-sm font-medium text-ai-secondary\">AI Active</span>\n              </div>\n              <Button variant=\"ghost\" size=\"sm\" data-testid=\"share-project\">\n                <Share className=\"h-4 w-4\" />\n              </Button>\n              <Button variant=\"ghost\" size=\"sm\" data-testid=\"more-options\">\n                <MoreHorizontal className=\"h-4 w-4\" />\n              </Button>\n            </div>\n          </div>\n\n          {/* Tab Navigation */}\n          <div className=\"flex items-center mt-4 space-x-1\">\n            {tabs.map((tab) => {\n              const IconComponent = tab.icon;\n              return (\n                <Button\n                  key={tab.id}\n                  variant={activeTab === tab.id ? \"default\" : \"ghost\"}\n                  className={`px-4 py-2 font-medium transition-colors ${\n                    activeTab === tab.id \n                      ? \"bg-ai-primary text-white hover:bg-ai-primary/90\" \n                      : \"text-muted-foreground hover:bg-muted\"\n                  }`}\n                  onClick={() => setActiveTab(tab.id)}\n                  data-testid={`tab-${tab.id}`}\n                >\n                  <IconComponent className=\"h-4 w-4 mr-2\" />\n                  {tab.label}\n                </Button>\n              );\n            })}\n          </div>\n        </div>\n\n        {/* Content Area */}\n        <div className=\"flex-1 overflow-hidden\">\n          {activeTab === 'notes' && (\n            <NotesEditor projectId={currentProjectId} />\n          )}\n          {activeTab === 'tasks' && (\n            <KanbanBoard projectId={currentProjectId} />\n          )}\n          {activeTab === 'time' && (\n            <TimeTracking projectId={currentProjectId} />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":5058},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/rich-text-editor.tsx":{"content":"import { useEditor, EditorContent } from '@tiptap/react';\nimport StarterKit from '@tiptap/starter-kit';\nimport Link from '@tiptap/extension-link';\nimport Highlight from '@tiptap/extension-highlight';\nimport TaskList from '@tiptap/extension-task-list';\nimport TaskItem from '@tiptap/extension-task-item';\nimport { Button } from '@/components/ui/button';\nimport { Separator } from '@/components/ui/separator';\nimport { \n  Bold, \n  Italic, \n  Underline, \n  Code, \n  Heading1, \n  Heading2, \n  Heading3,\n  List, \n  ListOrdered,\n  Quote,\n  Link as LinkIcon,\n  Undo,\n  Redo\n} from 'lucide-react';\nimport { cn } from '@/lib/utils';\n\ninterface RichTextEditorProps {\n  content: string;\n  onChange: (content: string) => void;\n  placeholder?: string;\n  className?: string;\n}\n\nexport default function RichTextEditor({ \n  content, \n  onChange, \n  placeholder = \"Start writing...\",\n  className \n}: RichTextEditorProps) {\n  const editor = useEditor({\n    extensions: [\n      StarterKit.configure({\n        heading: {\n          levels: [1, 2, 3],\n        },\n      }),\n      Link.configure({\n        openOnClick: false,\n        HTMLAttributes: {\n          class: 'text-ai-primary underline hover:text-ai-primary/80 cursor-pointer',\n        },\n      }),\n      Highlight.configure({\n        HTMLAttributes: {\n          class: 'bg-yellow-200 dark:bg-yellow-800 px-1 rounded',\n        },\n      }),\n      TaskList,\n      TaskItem.configure({\n        nested: true,\n      }),\n    ],\n    content,\n    onUpdate: ({ editor }) => {\n      onChange(editor.getHTML());\n    },\n    editorProps: {\n      attributes: {\n        class: 'prose prose-lg max-w-none focus:outline-none',\n        'data-testid': 'rich-text-editor',\n      },\n    },\n  });\n\n  if (!editor) {\n    return null;\n  }\n\n  const ToolbarButton = ({ \n    onClick, \n    isActive = false, \n    disabled = false, \n    children, \n    title \n  }: {\n    onClick: () => void;\n    isActive?: boolean;\n    disabled?: boolean;\n    children: React.ReactNode;\n    title: string;\n  }) => (\n    <Button\n      variant=\"ghost\"\n      size=\"sm\"\n      onClick={onClick}\n      disabled={disabled}\n      className={cn(\n        \"h-8 w-8 p-0\",\n        isActive && \"bg-muted text-ai-primary\"\n      )}\n      title={title}\n    >\n      {children}\n    </Button>\n  );\n\n  return (\n    <div className={cn(\"border border-border rounded-lg overflow-hidden\", className)}>\n      {/* Toolbar */}\n      <div className=\"border-b border-border p-2 bg-muted/30\">\n        <div className=\"flex items-center space-x-1\">\n          {/* Text formatting */}\n          <ToolbarButton\n            onClick={() => editor.chain().focus().toggleBold().run()}\n            isActive={editor.isActive('bold')}\n            title=\"Bold\"\n          >\n            <Bold className=\"h-4 w-4\" />\n          </ToolbarButton>\n          <ToolbarButton\n            onClick={() => editor.chain().focus().toggleItalic().run()}\n            isActive={editor.isActive('italic')}\n            title=\"Italic\"\n          >\n            <Italic className=\"h-4 w-4\" />\n          </ToolbarButton>\n          <ToolbarButton\n            onClick={() => editor.chain().focus().toggleCode().run()}\n            isActive={editor.isActive('code')}\n            title=\"Code\"\n          >\n            <Code className=\"h-4 w-4\" />\n          </ToolbarButton>\n          <ToolbarButton\n            onClick={() => editor.chain().focus().toggleHighlight().run()}\n            isActive={editor.isActive('highlight')}\n            title=\"Highlight\"\n          >\n            <span className=\"text-xs font-bold\">H</span>\n          </ToolbarButton>\n\n          <Separator orientation=\"vertical\" className=\"h-6\" />\n\n          {/* Headings */}\n          <ToolbarButton\n            onClick={() => editor.chain().focus().toggleHeading({ level: 1 }).run()}\n            isActive={editor.isActive('heading', { level: 1 })}\n            title=\"Heading 1\"\n          >\n            <Heading1 className=\"h-4 w-4\" />\n          </ToolbarButton>\n          <ToolbarButton\n            onClick={() => editor.chain().focus().toggleHeading({ level: 2 }).run()}\n            isActive={editor.isActive('heading', { level: 2 })}\n            title=\"Heading 2\"\n          >\n            <Heading2 className=\"h-4 w-4\" />\n          </ToolbarButton>\n          <ToolbarButton\n            onClick={() => editor.chain().focus().toggleHeading({ level: 3 }).run()}\n            isActive={editor.isActive('heading', { level: 3 })}\n            title=\"Heading 3\"\n          >\n            <Heading3 className=\"h-4 w-4\" />\n          </ToolbarButton>\n\n          <Separator orientation=\"vertical\" className=\"h-6\" />\n\n          {/* Lists */}\n          <ToolbarButton\n            onClick={() => editor.chain().focus().toggleBulletList().run()}\n            isActive={editor.isActive('bulletList')}\n            title=\"Bullet List\"\n          >\n            <List className=\"h-4 w-4\" />\n          </ToolbarButton>\n          <ToolbarButton\n            onClick={() => editor.chain().focus().toggleOrderedList().run()}\n            isActive={editor.isActive('orderedList')}\n            title=\"Numbered List\"\n          >\n            <ListOrdered className=\"h-4 w-4\" />\n          </ToolbarButton>\n          <ToolbarButton\n            onClick={() => editor.chain().focus().toggleTaskList().run()}\n            isActive={editor.isActive('taskList')}\n            title=\"Task List\"\n          >\n            <span className=\"text-xs font-bold\">✓</span>\n          </ToolbarButton>\n\n          <Separator orientation=\"vertical\" className=\"h-6\" />\n\n          {/* Other formatting */}\n          <ToolbarButton\n            onClick={() => editor.chain().focus().toggleBlockquote().run()}\n            isActive={editor.isActive('blockquote')}\n            title=\"Quote\"\n          >\n            <Quote className=\"h-4 w-4\" />\n          </ToolbarButton>\n\n          <Separator orientation=\"vertical\" className=\"h-6\" />\n\n          {/* Undo/Redo */}\n          <ToolbarButton\n            onClick={() => editor.chain().focus().undo().run()}\n            disabled={!editor.can().undo()}\n            title=\"Undo\"\n          >\n            <Undo className=\"h-4 w-4\" />\n          </ToolbarButton>\n          <ToolbarButton\n            onClick={() => editor.chain().focus().redo().run()}\n            disabled={!editor.can().redo()}\n            title=\"Redo\"\n          >\n            <Redo className=\"h-4 w-4\" />\n          </ToolbarButton>\n        </div>\n      </div>\n\n      {/* Editor */}\n      <div className=\"min-h-[300px] p-4\">\n        <EditorContent \n          editor={editor} \n          placeholder={placeholder}\n          className=\"w-full h-full\"\n        />\n      </div>\n    </div>\n  );\n}\n","size_bytes":6619},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"server/services/ai-service.ts":{"content":"import OpenAI from 'openai';\nimport type { AITaskSuggestion } from '@shared/schema';\n\nlet openai: OpenAI | null = null;\n\n// Initialize OpenAI client if API key is available\nif (process.env.OPENAI_API_KEY) {\n  openai = new OpenAI({\n    apiKey: process.env.OPENAI_API_KEY,\n  });\n}\n\nexport async function extractTasksFromNote(\n  noteContent: string,\n  noteTitle: string,\n  projectContext?: string\n): Promise<AITaskSuggestion[]> {\n  if (!openai) {\n    // Return empty array if no OpenAI key configured\n    return [];\n  }\n\n  try {\n    const prompt = `\nAnalyze the following note content and extract actionable tasks. Return a JSON array of task objects.\n\nNote Title: \"${noteTitle}\"\nProject Context: ${projectContext || 'General'}\n\nNote Content:\n${noteContent}\n\nFor each task, provide:\n- title: Clear, actionable task title\n- description: Optional brief description  \n- priority: one of \"low\", \"medium\", \"high\", \"urgent\"\n- dueDate: ISO date string if mentioned, null otherwise\n- tags: array of relevant tags/categories\n\nOnly extract tasks that are clearly actionable. Ignore general notes, ideas, or completed items.\nReturn empty array if no actionable tasks found.\n\nRespond with valid JSON only:`;\n\n    const completion = await openai.chat.completions.create({\n      model: \"gpt-4\",\n      messages: [\n        {\n          role: \"system\",\n          content: \"You are an AI assistant that extracts actionable tasks from note content. Always respond with valid JSON array format.\"\n        },\n        {\n          role: \"user\",\n          content: prompt\n        }\n      ],\n      temperature: 0.3,\n      max_tokens: 1000,\n    });\n\n    const response = completion.choices[0]?.message?.content;\n    if (!response) return [];\n\n    try {\n      const tasks = JSON.parse(response);\n      return Array.isArray(tasks) ? tasks : [];\n    } catch (parseError) {\n      console.error('Failed to parse AI response:', parseError);\n      return [];\n    }\n  } catch (error) {\n    console.error('AI task extraction failed:', error);\n    return [];\n  }\n}\n\nexport async function isAIServiceAvailable(): Promise<boolean> {\n  return !!openai;\n}","size_bytes":2110},"server/services/feature-flags-service.ts":{"content":"import { storage } from '../storage';\nimport type { FeatureFlag, InsertFeatureFlag } from '@shared/schema';\n\nexport interface FeatureFlagService {\n  getFeatureFlags(userId: string, workspaceId?: string): Promise<Record<string, boolean>>;\n  setFeatureFlag(scopeType: 'user' | 'workspace', scopeId: string, key: string, value: boolean): Promise<void>;\n  isFeatureEnabled(userId: string, workspaceId: string | undefined, flagKey: string): Promise<boolean>;\n}\n\n// Default feature flag values\nconst DEFAULT_FLAGS = {\n  ai_extraction: true,\n  recurrence: true,\n  time_tracking: true,\n  calendar_sync: false,\n  pro_notes_visibility_policy: false,\n};\n\nclass InMemoryFeatureFlagService implements FeatureFlagService {\n  private flags: Map<string, Map<string, boolean>> = new Map();\n\n  private getKey(scopeType: 'user' | 'workspace', scopeId: string): string {\n    return `${scopeType}:${scopeId}`;\n  }\n\n  async getFeatureFlags(userId: string, workspaceId?: string): Promise<Record<string, boolean>> {\n    const result = { ...DEFAULT_FLAGS };\n\n    // Get user-level flags\n    const userKey = this.getKey('user', userId);\n    const userFlags = this.flags.get(userKey);\n    if (userFlags) {\n      for (const [key, value] of userFlags) {\n        result[key] = value;\n      }\n    }\n\n    // Get workspace-level flags (override user flags)\n    if (workspaceId) {\n      const workspaceKey = this.getKey('workspace', workspaceId);\n      const workspaceFlags = this.flags.get(workspaceKey);\n      if (workspaceFlags) {\n        for (const [key, value] of workspaceFlags) {\n          result[key] = value;\n        }\n      }\n    }\n\n    return result;\n  }\n\n  async setFeatureFlag(scopeType: 'user' | 'workspace', scopeId: string, key: string, value: boolean): Promise<void> {\n    const scopeKey = this.getKey(scopeType, scopeId);\n    \n    if (!this.flags.has(scopeKey)) {\n      this.flags.set(scopeKey, new Map());\n    }\n    \n    this.flags.get(scopeKey)!.set(key, value);\n  }\n\n  async isFeatureEnabled(userId: string, workspaceId: string | undefined, flagKey: string): Promise<boolean> {\n    const flags = await this.getFeatureFlags(userId, workspaceId);\n    return flags[flagKey] ?? DEFAULT_FLAGS[flagKey] ?? false;\n  }\n}\n\nexport const featureFlagService = new InMemoryFeatureFlagService();\n\n// Initialize with some default flags for demo user\n(async () => {\n  await featureFlagService.setFeatureFlag('user', 'default-user', 'ai_extraction', true);\n  await featureFlagService.setFeatureFlag('user', 'default-user', 'time_tracking', true);\n  await featureFlagService.setFeatureFlag('user', 'default-user', 'recurrence', true);\n})();","size_bytes":2609},"client/src/components/ai-task-suggestions.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Loader2, Check, X, Clock, AlertCircle, Brain } from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { AITaskSuggestion } from \"@shared/schema\";\n\ninterface AITaskSuggestionsProps {\n  noteId: string;\n  projectId: string;\n  suggestions: AITaskSuggestion[];\n  onAccept?: (task: AITaskSuggestion) => void;\n  onReject?: (index: number) => void;\n}\n\nconst priorityIcons = {\n  low: Clock,\n  medium: AlertCircle,\n  high: AlertCircle,\n  urgent: AlertCircle,\n};\n\nconst priorityColors = {\n  low: \"bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-300\",\n  medium: \"bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-300\",\n  high: \"bg-orange-100 text-orange-800 dark:bg-orange-900 dark:text-orange-300\",\n  urgent: \"bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-300\",\n};\n\nexport default function AITaskSuggestions({\n  noteId,\n  projectId,\n  suggestions,\n  onAccept,\n  onReject\n}: AITaskSuggestionsProps) {\n  const [acceptingTasks, setAcceptingTasks] = useState<Set<number>>(new Set());\n  const queryClient = useQueryClient();\n\n  const createTaskMutation = useMutation({\n    mutationFn: async (task: AITaskSuggestion & { noteId: string; projectId: string }) => {\n      return apiRequest('/api/tasks', {\n        method: 'POST',\n        body: JSON.stringify({\n          title: task.title,\n          description: task.description,\n          priority: task.priority,\n          dueDate: task.dueDate,\n          projectId: task.projectId,\n          noteId: task.noteId,\n          tags: task.tags || [],\n        }),\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/projects', projectId, 'tasks'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/tasks'] });\n    },\n  });\n\n  const handleAcceptTask = async (task: AITaskSuggestion, index: number) => {\n    setAcceptingTasks(prev => new Set(prev).add(index));\n    \n    try {\n      await createTaskMutation.mutateAsync({\n        ...task,\n        noteId,\n        projectId,\n      });\n      \n      onAccept?.(task);\n    } catch (error) {\n      console.error('Failed to create task:', error);\n    } finally {\n      setAcceptingTasks(prev => {\n        const newSet = new Set(prev);\n        newSet.delete(index);\n        return newSet;\n      });\n    }\n  };\n\n  const handleRejectTask = (index: number) => {\n    onReject?.(index);\n  };\n\n  if (!suggestions.length) {\n    return (\n      <Card className=\"border-dashed\">\n        <CardContent className=\"flex flex-col items-center justify-center py-8 text-center\">\n          <Brain className=\"h-8 w-8 text-muted-foreground mb-2\" />\n          <p className=\"text-sm text-muted-foreground\">\n            No task suggestions available\n          </p>\n          <p className=\"text-xs text-muted-foreground mt-1\">\n            Write some notes to get AI-powered task suggestions\n          </p>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card>\n      <CardHeader className=\"pb-3\">\n        <CardTitle className=\"text-sm font-medium flex items-center\">\n          <Brain className=\"h-4 w-4 mr-2 text-ai-secondary\" />\n          AI Task Suggestions\n        </CardTitle>\n      </CardHeader>\n      <CardContent className=\"space-y-3\">\n        {suggestions.map((suggestion, index) => {\n          const PriorityIcon = priorityIcons[suggestion.priority];\n          const isAccepting = acceptingTasks.has(index);\n          \n          return (\n            <div\n              key={index}\n              className=\"p-3 border rounded-lg bg-card hover:bg-accent/5 transition-colors\"\n            >\n              <div className=\"flex items-start justify-between mb-2\">\n                <h4 className=\"text-sm font-medium text-card-foreground leading-5\">\n                  {suggestion.title}\n                </h4>\n                <div className=\"flex items-center space-x-1 ml-2\">\n                  <Button\n                    size=\"sm\"\n                    variant=\"ghost\"\n                    className=\"h-6 w-6 p-0 text-green-600 hover:text-green-700 hover:bg-green-50\"\n                    onClick={() => handleAcceptTask(suggestion, index)}\n                    disabled={isAccepting}\n                  >\n                    {isAccepting ? (\n                      <Loader2 className=\"h-3 w-3 animate-spin\" />\n                    ) : (\n                      <Check className=\"h-3 w-3\" />\n                    )}\n                  </Button>\n                  <Button\n                    size=\"sm\"\n                    variant=\"ghost\"\n                    className=\"h-6 w-6 p-0 text-red-600 hover:text-red-700 hover:bg-red-50\"\n                    onClick={() => handleRejectTask(index)}\n                    disabled={isAccepting}\n                  >\n                    <X className=\"h-3 w-3\" />\n                  </Button>\n                </div>\n              </div>\n              \n              {suggestion.description && (\n                <p className=\"text-xs text-muted-foreground mb-2 leading-4\">\n                  {suggestion.description}\n                </p>\n              )}\n              \n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center space-x-2\">\n                  <Badge\n                    variant=\"secondary\"\n                    className={`text-xs px-2 py-0.5 ${priorityColors[suggestion.priority]}`}\n                  >\n                    <PriorityIcon className=\"h-3 w-3 mr-1\" />\n                    {suggestion.priority}\n                  </Badge>\n                  \n                  {suggestion.dueDate && (\n                    <Badge variant=\"outline\" className=\"text-xs px-2 py-0.5\">\n                      <Clock className=\"h-3 w-3 mr-1\" />\n                      {new Date(suggestion.dueDate).toLocaleDateString()}\n                    </Badge>\n                  )}\n                </div>\n                \n                {suggestion.tags && suggestion.tags.length > 0 && (\n                  <div className=\"flex items-center space-x-1\">\n                    {suggestion.tags.slice(0, 2).map((tag, tagIndex) => (\n                      <Badge\n                        key={tagIndex}\n                        variant=\"outline\"\n                        className=\"text-xs px-1.5 py-0.5\"\n                      >\n                        {tag}\n                      </Badge>\n                    ))}\n                    {suggestion.tags.length > 2 && (\n                      <span className=\"text-xs text-muted-foreground\">\n                        +{suggestion.tags.length - 2}\n                      </span>\n                    )}\n                  </div>\n                )}\n              </div>\n            </div>\n          );\n        })}\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":7009},"client/src/components/feature-flags-provider.tsx":{"content":"import { createContext, useContext, ReactNode } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\n\ntype FeatureFlags = {\n  aiExtraction: boolean;\n  recurrence: boolean;\n  timeTracking: boolean;\n  calendarSync: boolean;\n  proNotesVisibilityPolicy: boolean;\n};\n\nconst defaultFeatureFlags: FeatureFlags = {\n  aiExtraction: true,\n  recurrence: true,\n  timeTracking: true,\n  calendarSync: false,\n  proNotesVisibilityPolicy: false,\n};\n\nconst FeatureFlagsContext = createContext<FeatureFlags>(defaultFeatureFlags);\n\ninterface FeatureFlagsProviderProps {\n  children: ReactNode;\n  userId?: string;\n  workspaceId?: string;\n}\n\nexport function FeatureFlagsProvider({ \n  children, \n  userId = \"default-user\", \n  workspaceId \n}: FeatureFlagsProviderProps) {\n  const { data: flags } = useQuery({\n    queryKey: ['/api/feature-flags', { userId, workspaceId }],\n    queryFn: async () => {\n      const params = new URLSearchParams({ userId });\n      if (workspaceId) params.append('workspaceId', workspaceId);\n      \n      const response = await fetch(`/api/feature-flags?${params}`);\n      if (!response.ok) return defaultFeatureFlags;\n      \n      const data = await response.json();\n      return {\n        aiExtraction: data.ai_extraction ?? defaultFeatureFlags.aiExtraction,\n        recurrence: data.recurrence ?? defaultFeatureFlags.recurrence,\n        timeTracking: data.time_tracking ?? defaultFeatureFlags.timeTracking,\n        calendarSync: data.calendar_sync ?? defaultFeatureFlags.calendarSync,\n        proNotesVisibilityPolicy: data.pro_notes_visibility_policy ?? defaultFeatureFlags.proNotesVisibilityPolicy,\n      };\n    },\n    staleTime: 5 * 60 * 1000, // 5 minutes\n  });\n\n  const featureFlags = flags || defaultFeatureFlags;\n\n  return (\n    <FeatureFlagsContext.Provider value={featureFlags}>\n      {children}\n    </FeatureFlagsContext.Provider>\n  );\n}\n\nexport function useFeatureFlags() {\n  const context = useContext(FeatureFlagsContext);\n  if (context === undefined) {\n    throw new Error('useFeatureFlags must be used within a FeatureFlagsProvider');\n  }\n  return context;\n}\n\nexport function useFeatureFlag(flag: keyof FeatureFlags): boolean {\n  const flags = useFeatureFlags();\n  return flags[flag];\n}","size_bytes":2217},"client/src/components/space-switcher.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Users, User } from \"lucide-react\";\n\ntype SpaceType = 'personal' | 'professional';\n\ninterface SpaceSwitcherProps {\n  currentSpace?: SpaceType;\n  onSpaceChange?: (space: SpaceType) => void;\n  className?: string;\n}\n\nexport default function SpaceSwitcher({ \n  currentSpace = 'personal', \n  onSpaceChange,\n  className = \"\" \n}: SpaceSwitcherProps) {\n  const [activeSpace, setActiveSpace] = useState<SpaceType>(currentSpace);\n\n  const handleSpaceChange = (space: SpaceType) => {\n    setActiveSpace(space);\n    onSpaceChange?.(space);\n  };\n\n  return (\n    <div className={`flex items-center space-x-1 ${className}`}>\n      <Button\n        variant={activeSpace === 'personal' ? 'default' : 'ghost'}\n        size=\"sm\"\n        onClick={() => handleSpaceChange('personal')}\n        className={`h-8 px-3 text-xs font-medium transition-colors ${\n          activeSpace === 'personal' \n            ? \"bg-ai-primary text-white hover:bg-ai-primary/90\" \n            : \"text-muted-foreground hover:bg-muted\"\n        }`}\n      >\n        <User className=\"h-3 w-3 mr-1.5\" />\n        Personal\n      </Button>\n      <Button\n        variant={activeSpace === 'professional' ? 'default' : 'ghost'}\n        size=\"sm\"\n        onClick={() => handleSpaceChange('professional')}\n        className={`h-8 px-3 text-xs font-medium transition-colors ${\n          activeSpace === 'professional' \n            ? \"bg-ai-primary text-white hover:bg-ai-primary/90\" \n            : \"text-muted-foreground hover:bg-muted\"\n        }`}\n      >\n        <Users className=\"h-3 w-3 mr-1.5\" />\n        Professional\n      </Button>\n    </div>\n  );\n}","size_bytes":1734}}}