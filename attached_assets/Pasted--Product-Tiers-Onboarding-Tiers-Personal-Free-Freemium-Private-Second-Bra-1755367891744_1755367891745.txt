

# Product/Tiers & Onboarding

**Tiers**

* **Personal (Free/Freemium):** Private “Second Brain”: notes, AI extraction, solo tasks, personal time tracking.
* **Professional (Premium):** Team workspaces, projects, RBAC, shared notes/tasks, team time analytics.

**Signup Flow (Feature-Gated)**

1. **Account → Choose Mode(s):**

   * Toggle: `Use Personal Space` (default ON)
   * Toggle: `Use Professional Space` (optional; if ON → ask to create/join workspace)
2. **If Professional ON:**

   * Create workspace (name, region) or join via invite code.
   * Choose policy: “Managers can access member project notes” (ON/OFF).
3. **Feature Preferences (all optional switches):**

   * AI Task Extraction (default ON)
   * Recurring Tasks (ON)
   * Time Tracking (ON)
   * Calendar Sync (OFF)
4. **Post-Signup First Run:**

   * Show existing UI unchanged; add a **compact top bar chip** to switch Personal/Professional; no redesign.

# UX Flows (preserve current UI)

* **Single Pane + Side Drawer:** Keep your current layout. Add:

  * **Space Switcher Chip:** Personal | Professional.
  * **Quick Capture** input (lightweight, inline) for “note or task”.
  * **Kanban Drawer** (collapsible) inside same page, not a new route.
* **Note → Task Flow:**

  * User writes note → AI proposes extracted tasks in a side panel → user Accept/Ignore.
  * Accepted tasks auto-link back to the note.
* **Kanban Actions:**

  * Drag to **In Progress** → timer auto-start.
  * Drag to **Paused** → auto-pause.
  * Drag to **Done** → auto-stop + prompt to log final notes.
* **Recurring Task UX:**

  * “Repeat” dropdown on task: daily/weekly/monthly/yearly/custom (RRULE-like).
  * “Repeat until” date or “forever”.

# Information Architecture

* **Spaces:** Personal (isolated) and Professional (one or more Workspaces).
* **Within a Space:** Projects → Notes & Tasks → Time Logs → Reports.
* **Global Search:** Notes, tasks, tags, people (scoped to current space by default).

# Permissions (RBAC)

* **Roles (Professional):** Owner, Manager, Member, Viewer.
* **Matrix:**

  * Owner: everything.
  * Manager: manage projects, assign tasks, (optional) view member notes if policy ON.
  * Member: create/edit own notes/tasks, view shared.
  * Viewer: read-only on shared items.
* **Personal Space:** always private; no sharing; separate encryption key.

# Data Model (high level)

```
User(id, email, name, …, personal_key_ref)
Space(id, type: 'personal'|'professional')
Workspace(id, space_id, name, policy_manager_note_access:boolean)
Membership(id, workspace_id, user_id, role)

Project(id, workspace_id, name, status)
Note(id, space_id or workspace_id, project_id?, author_id, title, content_md, tags[], backlinks[], visibility_scope)
Task(id, project_id, note_id?, title, description, status, assignee_id?, priority, due_at, tags[])
Subtask(id, task_id, title, done:boolean)

BoardColumn(id, project_id, name, order) // To Do, In Progress, Paused, Done
TaskBoardPosition(task_id, column_id, order)

TimeLog(id, task_id, user_id, started_at, stopped_at, duration_sec)
RecurrenceRule(id, task_id, rrule_text, timezone, next_occurrence_at)
Attachment(id, owner_type, owner_id, url, mime)
Notification(id, user_id, type, payload, read_at)
FeatureFlag(id, scope_type:'user|workspace', scope_id, key, value)
AuditLog(id, workspace_id?, actor_id, action, target_type, target_id, diff_json, at)
```

# API Design (REST, keep URLs stable; add new endpoints)

**Auth/Onboarding**

* `POST /auth/signup` (accepts mode toggles, initial flags)
* `POST /workspaces` | `POST /workspaces/join`

**Spaces & Flags**

* `GET /spaces/current`
* `GET/PUT /feature-flags?scope={user|workspace}`

**Notes**

* `GET/POST /notes`
* `GET/PUT/DELETE /notes/:id`
* `POST /notes/:id/extract-tasks` (AI)

**Tasks & Boards**

* `GET/POST /projects/:id/tasks`
* `PUT /tasks/:id` (status, assignee, due)
* `POST /tasks/:id/subtasks`
* `POST /boards/:projectId/columns/reorder`
* `POST /tasks/:id/move` (columnId) → triggers timer logic

**Time Tracking**

* `POST /tasks/:id/timer/start`
* `POST /tasks/:id/timer/pause`
* `POST /tasks/:id/timer/stop`
* `GET /reports/time?scope=project|workspace|me&range=…`

**Recurrence**

* `POST /tasks/:id/recurrence` (rrule)
* Worker creates next instance and links back.

**Search**

* `GET /search?q=…&scope=space|workspace|project`

**Notifications**

* `GET /notifications` / `PUT /notifications/:id/read`

# Domain Logic

**Task State Machine**

* Allowed transitions:

  * ToDo → InProgress (start timer)
  * InProgress → Paused (pause timer)
  * Paused → InProgress (resume)
  * InProgress|Paused → Done (stop timer)

**Timer Rules**

* Only one active timer per user at a time (auto-pause other running tasks).
* Server authoritative timestamps; client sends intent.

**Recurrence Engine**

* Store RRULE; background job materializes the next task at completion or at next due window.
* Keep a `series_id` so history is linked.

**AI Extraction**

* On note save or on-demand: send content to AI service.
* Return structured candidates: `[title, assignee, due_at, priority, note_id, project_id?]`.
* User approves → tasks created; link preserved.

# Security & Privacy

* **Personal Space encryption-at-rest** with a per-user key (KMS reference).
* Hard separation: Personal vs Professional data in queries.
* Workspace policy gates note visibility.
* Audit logs for professional actions.
* Rate limiting & input validation.
* PII minimization in logs.

# Observability

* Event stream: `task_status_changed`, `timer_started/paused/stopped`, `note_created`, `ai_extraction_run`.
* Metrics: task throughput, timer accuracy, AI acceptance rate, recurrence success.
* Error tracking: client + server.

# Non-Functional

* Performance: <150ms P95 for core reads; board moves <100ms UX feedback (optimistic updates).
* Accessibility: keyboard flows, ARIA, color contrast.
* Offline-first: queue writes, reconcile on reconnect.
* Testing: unit (domain), integration (API), E2E (critical flows).

# Rollout Plan

1. Add feature flags (per user/workspace).
2. Ship Personal/Professional separation behind a flag.
3. Add Kanban + Timer state machine.
4. Add AI extraction.
5. Add Recurrence + scheduler.
6. Enable professional policy for note visibility.
7. Migrate early adopters; monitor.

---

## Replit Agent Build Prompt (paste this in)

**Goal:** Integrate features below into the **existing website without changing the current design or layout**. Extend only; reuse current components and styles.

**Constraints**

* Keep **UI/UX identical** to current app.
* Add a **Space Switcher** chip (Personal | Professional) in the header/top bar without changing its styling scale or spacing.
* Kanban should render in a collapsible drawer within the current main page; do not add new tabs unless no alternative.

**Tasks**

1. **Feature Flags**

   * Add a feature flag service (user/workspace scope). Keys: `ai_extraction`, `recurrence`, `time_tracking`, `calendar_sync`, `pro_notes_visibility_policy`.

2. **Auth & Onboarding**

   * Extend signup form with toggles: Personal Space (ON), Professional Space (optional).
   * If Professional selected: create or join workspace and set `pro_notes_visibility_policy` (boolean).
   * Store selections as flags; do not alter existing visual design.

3. **Spaces & Permissions**

   * Implement Personal and Professional spaces with strict data scoping.
   * RBAC for Professional: Owner/Manager/Member/Viewer middleware.
   * Separate encryption key reference for Personal notes.

4. **Notes + AI Extraction**

   * Add endpoint `POST /notes/:id/extract-tasks`.
   * Create a right-side panel that shows AI-suggested tasks (use existing panel components).
   * On Accept → create tasks linked to the note.

5. **Kanban + Tasks**

   * Add board columns (ToDo, InProgress, Paused, Done).
   * Drag-and-drop using the app’s existing DnD utilities.
   * Subtasks, priority, due date, tags, comments using current input components.

6. **Time Tracking**

   * Implement task timer endpoints and domain logic:

     * Move → InProgress = start; → Paused = pause; → Done = stop.
     * Enforce one active timer per user.
   * Add minimal timer UI to task cards (match existing card style).

7. **Recurring Tasks**

   * Add RRULE storage; small scheduler (cron/worker) to materialize next instances.
   * “Repeat” control in task modal using current select component.

8. **Search**

   * Extend existing search to include tasks and notes in current space only.

9. **Reports**

   * Add simple time reports (per user/task/project) using existing table and export button styles.

**Data/Files**

* Migrations for new tables listed in Data Model.
* API routes per API Design section.
* Background worker for recurrence + AI extraction queue.
* Unit tests for state machine and recurrence.

**Do Not**

* Do not modify typography, color tokens, spacing scale, or existing layouts.
* Do not introduce new global components unless absolutely necessary—reuse current atoms/molecules.

**Deliverables**

* Updated backend routes/controllers/services.
* Frontend components: Space Switcher chip, AI Suggestions panel, Kanban drawer, Task modal extensions, Timer widget, Reports view.
* Feature flag config with safe defaults.
* Seed scripts for a demo workspace and sample tasks.
* Tests and brief README for new features.

